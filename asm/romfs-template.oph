.org $8000
.alias current_paged_rom $f4
.alias current_rom $f5
.alias exported_rom_pointer $f6
.alias exported_rom_pointer_low $f6
.alias exported_rom_pointer_high $f7
.alias OSRDRM $ffb9

rom_start:
.byte 0, 0, 0   ; null language entry
jmp service_entry

; ROM type
.byte $82       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
%(version)s

; Title string
%(title)s

; Version string
%(version string)s

copyright_string:
%(copyright)s

service_entry:

    ; Code to call a check for the ROM's star command.
    cmp #4
    beq service_command
    cmp #$0d
    beq init_command
    cmp #$0e
    beq read_byte_command

    service_entry_exit:
    rts

rom_name:
; A ROM name is included when the -M option is used.
%(rom name)s

init_command:

    pha
    tya
    bmi init_set_pointer
    eor #$0f
    cmp #$10
    bcs exit
    cmp current_paged_rom
    bcc exit

    init_set_pointer:

    lda #<data
    sta exported_rom_pointer
    lda #>data
    sta [exported_rom_pointer + 1]

    init_store_rom_number:
    lda current_paged_rom
    eor #$ff
    and #$0f
    sta current_rom

claim:
    pla
    lda #0
    rts

exit:
    pla
    rts

read_byte_command:
    pha

    lda current_rom
    eor #$ff
    and #$0f
    cmp current_paged_rom
    bne exit

    jsr trigger_check

    ldy #0
    lda (exported_rom_pointer),y
    tay

claim1:
    inc exported_rom_pointer
    bne claim1_sync
    inc [exported_rom_pointer + 1]

    claim1_sync:

    jmp claim

service_command:

; Code to check for the ROM's name being used as a star command.

    tya                         ; push Y and X registers onto the stack
    pha
    txa
    pha

    ldx #0

    service_command_rom_loop:

        lda ($f2),y
        cmp rom_name,x
        bne service_command_not_found
        iny
        inx
        cmp #13
        bne service_command_rom_loop

    jsr main_mgc_code
    pla
    tax
    pla
    tay
    lda #0
    rts

    service_command_not_found:
    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #4                      ; restore A
    rts

rom_command:

; Use ROMFS.
lda #141                    ; *ROM
jsr $fff4

; Executes the OS command to run the bootloader.

ldx #<boot_command
ldy #>boot_command
jmp $fff7

boot_command: .byte "*/", 13

trigger_check:

    ; The following check was obtained from
    ; http://mdfs.net/Info/Comp/BBC/SROMs/FastROMFS

    lda $e2                         ; If cataloguing, exit instead of checking
    and #$08                        ; for triggers.
    bne trigger_check_quick_exit

    ; Compare the exported ROM pointer to the triggers.

    txa         ; Save X for later.
    pha

    ldx #after_triggers ; Set X to refer to the address after the trigger array.

    trigger_check_loop:

        dex
        lda triggers,x                  ; Compare the high byte of the ROM
        cmp exported_rom_pointer_high   ; pointer to the current trigger.
        bne trigger_check_next

        dex
        lda triggers,x                  ; Compare the low byte of the ROM
        cmp exported_rom_pointer_low    ; pointer to the current trigger.
        beq trigger_start_decompression

        cpx #0                          ; If not at the base of the array then
        bne trigger_check_loop          ; loop again.
        beq trigger_exit                ; Otherwise exit.

        trigger_check_next:
        dex                             ; Point to the low byte before looping
        bne trigger_check_loop          ; again if not at the base of the array.

    trigger_exit:

    pla         ; Restore X.
    tax
    trigger_check_quick_exit:
    rts

trigger_start_decompression:

    lda src_addresses,x     ; Read the source address into the addresses used
    sta src_low             ; for the source address in the decompression
    inx                     ; routine.
    lda src_addresses,x
    sta src_high
    dex

    lda dest_addresses,x    ; Read the corresponding address into the addresses
    sta dest_low            ; used for the destination and ending addresses.
    inx
    lda dest_addresses,x
    sta dest_high
    dex

    lda dest_end_addresses,x
    sta end_low
    inx
    lda dest_end_addresses,x
    sta end_high

    jsr decompress          ; Call the decompression routine.

    pla                     ; Restore X.
    tax
    rts

.alias src       $90
.alias src_low   $90
.alias src_high  $91

.alias dest      $92
.alias dest_low  $92
.alias dest_high $93

.alias end_low   $94
.alias end_high  $95

.alias special      $96
.alias offset       $97
.alias from_low     $98
.alias from_high    $99

decompress: ; $90,$91=compressed data, $92,$93=destination start
            ; $94,$95=destination end (one byte after decompressed data)

    ldy #0
    lda (src),y                     ; data[i]
    sta special

    jsr increment_src               ; i += 1

    decompress_loop:

        lda (src),y                 ; data[i]
        cmp special
        beq handle_special

            sta (dest),y
            jsr increment_src       ; i += 1
            jsr increment_dest
            jmp decompress_next

        handle_special:

            iny                     ; i + 1
            lda (src),y             ; offset
            bne handle_reference

                lda special
                dey                 ; i
                sta (dest),y
                jsr increment_src_2 ; i += 2
                jsr increment_dest
                jmp decompress_next

            handle_reference:

                cmp #$80
                bcs far_reference

                    sta offset  ; the offset is a combined offset-count value
                    and #$f0
                    lsr
                    lsr
                    lsr
                    lsr
                    adc #3      ; count = (offset >> 4) + 3
                    tax

                    lda offset
                    and #$0f
                    sta offset

                    ldy #0

                    jsr increment_src_2     ; i += 2
                    jsr copy_decompressed
                    jmp decompress_next

                far_reference:

                    and #$7f
                    adc #0      ; C is set, so this adds 1
                    sta offset

                    iny         ; i + 2
                    lda (src),y ; count - 4
                    tax

                    ldy #0

                    jsr increment_src_3     ; i += 3
                    jsr copy_decompressed
                    ldx #4
                    jsr copy_decompressed   ; copy the extra four bytes

        decompress_next:

        lda dest_low
        cmp end_low
        bne decompress_loop
        lda dest_high
        cmp end_high
        bne decompress_loop

    clc
    rts

increment_src_3:
    jsr increment_src

increment_src_2:
    jsr increment_src

increment_src:

    inc src_low
    bne increment_src_exit
    inc src_high

    increment_src_exit:
    rts

increment_dest:

    inc dest_low
    bne increment_dest_exit
    inc dest_high

    increment_dest_exit:
    rts

copy_decompressed:

    cpx #0                      ; Since we don't add 4 to the stored count
    bne copy_decompressed_begin ; value to get the real length, we need to
    rts                         ; handle the case where the stored value is 0.

    copy_decompressed_begin:
 
    sec
    lda dest_low
    sbc offset      ; copy from = dest - offset
    sta from_low
    lda dest_high
    sbc #0
    sta from_high
    clc

    copy_decompressed_loop:

        lda (from_low),y
        sta (dest),y

        inc from_low
        bne copy_decompressed_loop_next
        inc from_high

        copy_decompressed_loop_next:
        jsr increment_dest
        dex
        bne copy_decompressed_loop

    rts

.alias end_scroll_offset 200
.alias title_palette_start [128 + 68]
.alias title_palette_finish [128 + 105]
.alias title_dest_end $5800

.alias long_field 60
.alias short_field 59

.alias fields $70
.alias first_field $70
.alias second_field $71

.alias frame_counter $72
.alias text_lines $73
.alias frame_delay $74
.alias palette_lines $75

.alias initial_frame_delay_value 1
.alias initial_scanlines 1
.alias most_scanlines 31
.alias max_scanlines 41
.alias max_palette_lines_value 129
.alias max_palette_lines_min 41
.alias visible_palette_lines_value 100
.alias visible_palette_lines_max 188
.alias initial_scroll_offset 0
.alias initial_palette_offset 3
;.alias end_scroll_offset 200           ; defined in the mgccode-*.oph files

.alias screen_low $76
.alias screen_high $77

.alias scroll_offset $78
.alias max_palette_lines $79
.alias visible_palette_lines $7a
.alias palette_counter $7b
.alias palette_offset $7c
.alias initial_frame_delay $7d
.alias animation_index $7e
.alias animation_value0 $84
.alias animation_value1 $85

; Cycle a full range of palette colours (3 lines per colour, 6 colours,
; 2 cycles -> 36 lines, with one extra that doesn't seem to mess up the flow).
;.alias title_palette_start [128 + 68]  ; defined in the mgccode-*.oph files
;.alias title_palette_finish [128 + 105]; defined in the mgccode-*.oph files
.alias palette_fe08 $2e00
.alias palette_fe09 $2f00
.alias title_dest_address $2e00
;.alias title_dest_end $5800            ; defined in the mgccode-*.oph files

main_mgc_code:

    lda #$fd
    ldx #0
    ldy #255
    jsr $fff4
    cpx #1              ; power up?
    beq enter_mgc_code
    rts                 ; otherwise exit

enter_mgc_code:

    jsr show_message

    lda #$00
    sta screen_low
    lda #$18
    sta screen_high

    sei

    lda #initial_scanlines      ; Number of MODE 3 scanlines to display
    sta text_lines

    lda #initial_frame_delay_value
    sta initial_frame_delay     ; Number of frames to show each displacement.
    sta frame_delay

    lda #max_palette_lines_value
    sta max_palette_lines
    sta palette_lines

    lda #visible_palette_lines_value
    sta visible_palette_lines

    lda #title_palette_start
    sta animation_index
    tax
    lda palette_fe08,x
    sta animation_value0
    lda palette_fe09,x
    sta animation_value1

    ; Clear the vsync interrupt bit.

    lda $f4
    ora #$10
    sta $fe05

    ; Wait until the vsync bit is cleared.

    lda #$04
    wait0:
    bit $fe00
    bne wait0

    ; Wait until the vsync bit is set, indicating the start of a new frame.

    wait1:
    bit $fe00
    beq wait1

    lda $f4
    ora #$10
    sta $fe05

    calibration:

        jsr calibrate
        stx $70
    
        jsr calibrate
        stx $71

        lda $70
        cmp $71
        beq calibration

    bcs highest_first

    lda #short_field        ; The first value is the lowest, so store a
    sta first_field         ; slightly lower value than the second value in
    lda #long_field         ; the first slot.
    sta second_field
    bcc pre_loop

    highest_first:

    lda #long_field         ; The first value is the highest, so store a
    sta first_field         ; slightly lower value in the second slot.
    lda #short_field
    sta second_field

    pre_loop:

    ldx #0
    stx frame_counter
    lda #initial_scroll_offset  ; Initialise the scroll offset.
    sta scroll_offset
    lda #initial_palette_offset ; Initialise the palette offset.
    sta palette_offset

main_loop:

    lda #$18                ; MODE 3
    sta $fe07
    sta $282

    start:

    ldx frame_counter       ; 3 c
    lda fields,x            ; 4 c
    tax
    jsr wait_scanlines

    ldx text_lines
    jsr wait_scanlines      ; Comment for use with Elkulator.
    ;jsr block_scanlines    ; Uncomment for use with Elkulator.

    lda #$08                ; MODE 1
    sta $fe07
    sta $282

    ldx palette_lines
    cpx #0
    beq show_palette

    jsr block_scanlines

    show_palette:

    ldx palette_offset          ; 3 c

    lda text_lines
    cmp #most_scanlines
    bne no_palette_correction

    dex

    no_palette_correction:

    lda visible_palette_lines   ; Only perform palette optimisation for some
    sta palette_counter         ; scanlines. We need time to do other things.

    palette_loop:
    
        ; Wait for around 24us (48 cycles) per scanline and block by reading RAM.

        ldy #8                      ; 2 c
        palette_loop_delay1:
            dey                     ; 2 c
            bne palette_loop_delay1 ; 3 c

                                    ; 42 c

        lda palette_fe08,x      ; 4 c
        sta $fe08               ; 4 c
        lda palette_fe09,x      ; 4 c
        sta $fe09               ; 4 c

        inx                     ; 2 c

        dec palette_counter     ; 5 c
        bne palette_loop        ; 2 c

    lda #$ff
    sta $fe08
    sta $fe09

    dec frame_delay                 ; Only update every few frames, depending
    beq +
    jmp next_frame                  ; on the frame delay constant.
*   lda initial_frame_delay
    sta frame_delay

    lda scroll_offset               ; Check whether the scrolling has finished.
    cmp #end_scroll_offset
    bcc scroll_down

    lda #1
    sta initial_frame_delay
    jsr animate_title               ; If scrolling has finished then animate
    jmp check_keys                  ; the title and check the keys as usual.

    scroll_down:
    clc
    adc #2                          ; Scroll down by two scanlines.
    sta scroll_offset

    lda text_lines
    cmp #initial_scanlines
    bne decrease_vcounter

        clc
        lda screen_high
        cmp #$3b
        bne down_one_line
        lda screen_low
        cmp #$00
        bne down_one_line

            lda #$40
            sta screen_low
            lda #$14
            sta screen_high
            jmp store_screen_address

        down_one_line:
        clc                     ; Update the screen start address.
        lda screen_low
        adc #$40
        sta screen_low
        lda screen_high
        adc #$01
        sta screen_high

        store_screen_address:
        lda screen_low
        sta $fe02
        lda screen_high
        sta $fe03

        lda #max_scanlines

        decrease_vcounter:
        sec                 ; Decrease the number of half scanlines to reveal
        sbc #10             ; another MODE 3 character row.

    reset_vcounter:
    sta text_lines

    calculate_remaining_lines:

    lda max_palette_lines           ; Normally the number of lines to blank
    cmp #max_palette_lines_min      ; would be fixed, but we start with a
    beq calculate_remaining_lines2  ; higher than required value to hide the
    sec                             ; MGC title image.
    sbc #2
    sta max_palette_lines

    calculate_remaining_lines2:
    sec                             ; Subtract the number of palette lines
    sbc text_lines                  ; to blank after the MODE 3 -> 1 change.
    sta palette_lines

    lda visible_palette_lines
    cmp #visible_palette_lines_max
    bne add_visible_lines

    inc palette_offset  ; Only increase the palette offset once the full
    inc palette_offset  ; scrolling area is visible. This is designed to
    jmp check_keys      ; occur when the top of the visible area has stopped
                        ; moving.
    add_visible_lines:
    adc #2
    sta visible_palette_lines

    check_keys:

    lda #121
    ldx #0
    jsr $fff4

    cpx #$ff
    bne end_loop

    next_frame:

    ; Wait for the vsync bit to be set.

    lda #$04                ; 2 c
    wait2:
    bit $fe00               ; 4 c
    beq wait2               ; 3 c

    lda $f4                 ; 3 c
    ora #$10                ; 2 c
    sta $fe05               ; 4 c

    lda frame_counter       ; 3 c
    eor #1                  ; 2 c
    sta frame_counter       ; 3 c

    jmp main_loop

end_loop:

    cli

    lda #12     ; CLS
    jsr $ffee

    ; Exit to MODE 6.
    ;lda #22
    ;jsr $ffee
    ;lda #6
    ;jsr $ffee

    ;lda #15
    ;ldx #1
    ;jsr $fff4

    rts

calibrate:

    ; Count the number of half scanlines to the end of the display. This will
    ; wrap around in an 8-bit value.

    lda #$04                ; 2 c
    ldx #0                  ; 2 c
    calibration_loop:

        ldy #11             ; 2 c
        delay1:
            dey             ; 2 c
            bne delay1      ; 3 c

        inx                 ; 2 c

        ; Continue until the vsync interrupt bit is set again.

        bit $fe00           ; 4 c
        beq calibration_loop; 3 c
                            ; (11 * 5) + 2 + 9 = 66

    ; Clear the vsync interrupt bit.

    lda $f4
    ora #$10
    sta $fe05

    rts

wait_scanlines:

    wait_loop:

        ; Wait for around 64us (128 cycles) per scanline.

        ldy #23             ; 2 c
        delay0:
            dey             ; 2 c
            bne delay0      ; 3 c

        nop                 ; 2 c
        dex                 ; 2 c
        bne wait_loop       ; 3 c
                            ; (23 * 5) + 2 + 7 = 124
    rts

block_scanlines:

    block_loop:

        ; Wait for around 24us (48 cycles) per scanline and block by reading RAM.

        ldy #8              ; 2 c
        delay2:
            dey             ; 2 c
            bne delay2      ; 3 c

                            ; 42 c
        
        lda $70             ; 3 c
        dex                 ; 2 c
        bne block_loop      ; 3 c

    rts                     ; 6 c

show_message:

    ldx #0

    print_loop:
        lda text,x
        jsr $ffee
        inx

        cpx #[text_end - text]
        bne print_loop

    lda #$ff                ; Blank the palette.
    sta $fe08
    sta $fe09

    lda #<title_data
    sta $90
    lda #>title_data
    sta $91

    lda #<title_dest_address
    sta $92
    lda #>title_dest_address
    sta $93

    lda #<title_dest_end
    sta $94
    lda #>title_dest_end
    sta $95

    jmp decompress

animate_title:

    ldx animation_index

    ldy #10
    animation_title_loop:

    inx
    cpx #title_palette_finish
    bne animate_title_next

    ldx #title_palette_start

    animate_title_next:

    lda palette_fe08,x
    sta $80
    lda palette_fe09,x
    sta $81

    lda animation_value0
    sta palette_fe08,x
    lda animation_value1
    sta palette_fe09,x

    lda $80
    sta animation_value0
    lda $81
    sta animation_value1

    dey
    bne animation_title_loop

    stx animation_index
    rts

text:
.byte 22,1, 23,1,0,0,0,0,0,0,0,0
text_end:

title_data:
.byte $0a,$73,$0a,$80,$7c,$13,$0a,$80,$28,$73,$73,$33,$0a,$01,$13,$13,$53,$0a,$01,$0a,$4c,$17,$57,$57
.byte $57,$0a,$0c,$0a,$01,$0a,$0e,$37,$17,$0a,$11,$0a,$91,$1a,$0a,$bd,$01,$13,$33,$33,$73,$0a,$26,$f1
.byte $0a,$80,$7c,$f7,$0a,$80,$28,$d3,$d3,$d3,$d1,$d1,$d5,$0a,$01,$d7,$d7,$0a,$0b,$0a,$2c,$f3,$f3,$0a
.byte $c6,$01,$f5,$0a,$94,$01,$0a,$01,$d3,$f3,$0a,$91,$19,$d5,$d1,$d3,$d3,$d7,$0a,$c0,$04,$0a,$09,$00
.byte $0a,$80,$8e,$03,$03,$03,$07,$07,$0a,$08,$0f,$0a,$11,$0a,$87,$17,$0c,$0a,$48,$00,$08,$0e,$0a,$38
.byte $0a,$1b,$0a,$04,$f0,$0a,$11,$0a,$87,$0f,$80,$0a,$11,$0a,$08,$30,$0a,$11,$0a,$9f,$0f,$e0,$0a,$11
.byte $0a,$c7,$03,$0a,$80,$37,$33,$77,$77,$00,$33,$33,$00,$00,$ff,$ff,$ff,$00,$cc,$cc,$00,$00,$ee,$ff
.byte $ff,$77,$77,$ff,$00,$00,$11,$33,$bb,$bb,$bb,$0a,$97,$02,$cc,$cc,$ff,$00,$00,$cc,$ee,$ee,$0a,$05
.byte $00,$00,$77,$ff,$ff,$11,$11,$11,$0a,$97,$01,$ee,$0a,$92,$00,$88,$dd,$dd,$0a,$c7,$01,$0a,$bf,$00
.byte $0a,$8f,$00,$0a,$08,$33,$33,$77,$00,$00,$00,$88,$cc,$dd,$dd,$99,$0a,$df,$00,$ff,$ee,$0a,$d7,$03
.byte $33,$0a,$b7,$00,$0a,$98,$00,$0a,$8f,$00,$0a,$80,$ff,$0a,$80,$3b,$01,$0a,$04,$07,$0f,$0f,$0f,$08
.byte $07,$07,$0a,$17,$0f,$00,$0a,$15,$0a,$87,$08,$08,$08,$08,$0a,$18,$03,$01,$01,$03,$0a,$92,$03,$0a
.byte $61,$0c,$0c,$0e,$0a,$11,$0c,$f0,$0a,$80,$13,$80,$0a,$21,$f0,$f0,$30,$0a,$21,$0a,$9f,$0e,$e0,$0a
.byte $41,$00,$0a,$80,$13,$ff,$77,$0a,$48,$ff,$0a,$87,$12,$ee,$ee,$0a,$38,$33,$0a,$31,$00,$dd,$ff,$dd
.byte $dd,$cc,$cc,$cc,$00,$ee,$cc,$cc,$ee,$ff,$ff,$77,$0a,$96,$03,$bb,$88,$ff,$ff,$cc,$cc,$ff,$ff,$ff
.byte $00,$cc,$cc,$0a,$b3,$00,$ee,$00,$11,$0a,$31,$0a,$1c,$0a,$11,$0a,$ef,$05,$ee,$ff,$0a,$8f,$02,$0a
.byte $07,$ff,$77,$77,$33,$0a,$a3,$01,$88,$88,$cc,$0a,$11,$ee,$ff,$77,$33,$0a,$b7,$00,$33,$77,$ff,$ee
.byte $00,$cc,$cc,$cc,$88,$88,$00,$00,$00,$77,$77,$0a,$b7,$02,$ff,$ff,$0a,$87,$12,$0a,$da,$07,$0a,$80
.byte $ff,$0a,$80,$16,$07,$0a,$41,$0f,$0a,$80,$0b,$08,$08,$09,$0a,$28,$0a,$98,$0d,$0a,$11,$0e,$0c,$00
.byte $0c,$0c,$08,$08,$0a,$bf,$00,$f0,$0a,$80,$33,$e0,$0a,$41,$0a,$c3,$00,$0a,$80,$17,$77,$0a,$8f,$0b
.byte $ee,$0a,$8f,$0b,$33,$0a,$97,$0b,$33,$0a,$90,$03,$ff,$0a,$8f,$03,$cc,$0a,$a7,$0b,$0a,$97,$04,$88
.byte $0a,$df,$13,$cc,$11,$0a,$af,$03,$0a,$a0,$03,$0a,$a7,$04,$0a,$96,$03,$0a,$bf,$05,$0a,$8f,$0c,$0a
.byte $ff,$04,$0a,$51,$0a,$ff,$0c,$0a,$80,$ff,$0a,$80,$12,$07,$0a,$41,$0f,$0a,$80,$11,$0b,$09,$0a,$91
.byte $0c,$00,$08,$08,$0c,$0e,$0e,$0a,$08,$0a,$31,$08,$f0,$0a,$80,$13,$80,$0a,$41,$30,$0a,$41,$0a,$9f
.byte $0c,$e0,$0a,$41,$0a,$c7,$03,$0a,$80,$0d,$77,$0a,$41,$0a,$0b,$ff,$ff,$ff,$00,$00,$ee,$0a,$41,$00
.byte $11,$33,$0a,$97,$01,$ff,$ff,$cc,$88,$88,$ff,$ff,$ff,$ee,$ee,$0a,$9a,$02,$77,$77,$00,$33,$0a,$11
.byte $ff,$ff,$00,$88,$99,$bb,$ff,$bb,$ee,$0a,$9b,$00,$cc,$88,$88,$0a,$97,$08,$0a,$01,$99,$ee,$ff,$ff
.byte $0a,$bd,$01,$0a,$05,$0a,$96,$00,$11,$00,$11,$99,$99,$99,$bb,$bb,$ff,$cc,$0a,$c4,$00,$ff,$ff,$33
.byte $33,$0a,$de,$02,$ee,$88,$88,$99,$0a,$b7,$01,$77,$ff,$ee,$cc,$cc,$ff,$0a,$11,$00,$0a,$b6,$00,$ff
.byte $33,$33,$00,$11,$0a,$11,$ff,$ff,$00,$cc,$cc,$dd,$ff,$dd,$0a,$c9,$00,$0a,$a2,$00,$0a,$c6,$00,$0a
.byte $97,$02,$0a,$ae,$01,$cc,$ee,$ee,$00,$00,$cc,$cc,$cc,$00,$0a,$80,$ff,$0a,$80,$19,$07,$0a,$21,$03
.byte $00,$0f,$0a,$31,$0a,$68,$09,$08,$0a,$21,$0a,$8f,$00,$07,$03,$03,$01,$0a,$97,$04,$0a,$61,$08,$0c
.byte $0e,$0e,$0a,$07,$0e,$f0,$0a,$11,$78,$78,$0a,$27,$0a,$80,$08,$80,$0a,$31,$00,$30,$30,$30,$10,$10
.byte $00,$00,$00,$0a,$96,$03,$0a,$68,$e0,$0a,$31,$00,$0a,$80,$14,$77,$0a,$01,$66,$0a,$8f,$07,$ee,$0a
.byte $01,$0a,$97,$03,$33,$33,$0a,$91,$01,$88,$88,$0a,$97,$08,$33,$0a,$01,$0a,$18,$bb,$99,$99,$0a,$97
.byte $01,$cc,$ee,$ee,$ff,$0a,$c0,$00,$0a,$97,$04,$99,$ff,$ff,$0a,$a7,$01,$ee,$cc,$0a,$9e,$01,$00,$11
.byte $11,$0a,$d7,$02,$ff,$ff,$0a,$bf,$04,$0a,$91,$02,$ee,$ee,$cc,$cc,$0a,$cf,$03,$0a,$90,$01,$88,$88
.byte $cc,$0a,$b1,$01,$77,$0a,$01,$0a,$b7,$02,$0a,$a7,$02,$dd,$cc,$0a,$a7,$02,$ee,$ff,$ff,$77,$0a,$e1
.byte $00,$11,$11,$11,$0a,$f8,$01,$cc,$ff,$ff,$ff,$0a,$d8,$01,$ee,$0a,$d7,$02,$0a,$80,$ff,$0a,$80,$41
.byte $07,$07,$03,$01,$0a,$18,$0f,$0f,$0f,$0c,$0a,$18,$0c,$08,$0a,$97,$02,$f0,$70,$70,$30,$30,$0a,$18
.byte $f0,$e0,$c0,$0a,$8f,$00,$c0,$80,$0a,$ff,$52,$0a,$80,$3b,$02,$0a,$ff,$7b,$0a,$80,$ff,$0a,$80,$74
.byte $07,$04,$0a,$11,$00,$00,$0c,$02,$0a,$11,$00,$00,$05,$06,$0a,$8f,$02,$09,$02,$02,$03,$0a,$8f,$00
.byte $0e,$01,$01,$0f,$00,$01,$00,$00,$01,$02,$02,$01,$00,$02,$0a,$a7,$00,$0a,$aa,$00,$00,$00,$03,$04
.byte $04,$07,$0a,$b7,$03,$0e,$0a,$97,$00,$0a,$b7,$04,$0a,$c7,$02,$04,$04,$0f,$0a,$d7,$03,$0a,$b7,$0c
.byte $0a,$31,$0a,$9f,$04,$02,$0a,$e5,$01,$0a,$e7,$03,$0a,$01,$0a,$af,$01,$0a,$f7,$09,$0a,$80,$ff,$0a
.byte $80,$d7,$07,$04,$04,$04,$0a,$18,$0c,$0a,$8f,$03,$0a,$2d,$0a,$01,$01,$0a,$48,$0e,$0a,$8f,$0b,$0a
.byte $a7,$04,$03,$0a,$8f,$0b,$0a,$b7,$04,$02,$0a,$9f,$0b,$0a,$b7,$0c,$0a,$51,$0a,$9f,$04,$0a,$af,$04
.byte $0a,$a7,$04,$0a,$f7,$0c,$0a,$80,$ff,$0a,$80,$7e,$33,$0a,$48,$ff,$fc,$76,$0a,$38,$87,$87,$0a,$38
.byte $f1,$f0,$0a,$98,$02,$88,$88,$0a,$c7,$22,$32,$0a,$bf,$03,$c3,$c3,$0a,$38,$78,$79,$0a,$38,$cc,$0a
.byte $bf,$02,$11,$0a,$e7,$04,$33,$0a,$3a,$ff,$87,$cb,$0a,$38,$e1,$78,$0a,$38,$3c,$7f,$0a,$97,$03,$ff
.byte $0a,$97,$03,$0a,$48,$3c,$1e,$0a,$28,$ee,$a6,$e2,$0a,$ff,$19,$00,$00,$33,$0a,$36,$fe,$bc,$0a,$17
.byte $77,$cf,$87,$97,$0a,$c6,$02,$0a,$c7,$02,$cc,$7f,$3c,$0a,$97,$01,$00,$88,$ee,$b7,$0a,$28,$11,$33
.byte $ef,$0a,$2f,$0a,$01,$0a,$d7,$1b,$0a,$80,$09,$77,$57,$df,$8f,$0a,$3a,$0a,$b7,$2a,$0a,$80,$ff,$0a
.byte $80,$15,$32,$0a,$41,$c3,$c3,$e1,$e1,$f7,$d5,$d5,$c4,$78,$78,$3c,$3c,$1e,$1e,$8f,$8f,$88,$cc,$c4
.byte $e6,$e2,$e2,$f3,$f1,$0a,$bb,$18,$11,$11,$33,$32,$74,$74,$fc,$f8,$f8,$f0,$f7,$d5,$c3,$0a,$41,$79
.byte $0a,$41,$0a,$b3,$14,$e9,$f8,$e9,$cb,$8f,$cb,$e9,$f8,$3c,$1e,$3c,$78,$f0,$78,$3c,$1e,$cc,$88,$0a
.byte $31,$0a,$d3,$05,$0a,$26,$22,$22,$ef,$33,$0a,$3a,$e2,$6a,$ea,$ea,$ee,$66,$22,$0a,$fd,$10,$33,$67
.byte $47,$cf,$8f,$67,$ed,$e9,$e1,$0a,$11,$3c,$3d,$3f,$2e,$6e,$4c,$cc,$88,$ff,$0a,$c9,$05,$0a,$31,$ff
.byte $0a,$c6,$02,$00,$87,$cf,$77,$0a,$2a,$e1,$e1,$e1,$e9,$ed,$67,$23,$33,$0a,$f6,$03,$0a,$ad,$0b,$0a
.byte $e5,$0f,$11,$33,$23,$23,$0a,$e8,$00,$0f,$0a,$31,$cc,$4c,$4c,$6e,$2e,$3f,$1f,$1f,$0a,$9e,$03,$0a
.byte $bf,$1d,$0a,$80,$ff,$0a,$80,$19,$32,$0a,$41,$c4,$0a,$41,$8f,$cf,$47,$67,$23,$33,$11,$11,$f1,$78
.byte $78,$3c,$3c,$1e,$1e,$1e,$88,$88,$cc,$c4,$c4,$e6,$e2,$f3,$0a,$b4,$09,$11,$11,$11,$32,$76,$75,$fd
.byte $f9,$fb,$e2,$e6,$dd,$99,$99,$0a,$0e,$11,$11,$c3,$0a,$41,$79,$0a,$41,$0a,$ef,$14,$e9,$cb,$8f,$cb
.byte $e9,$f8,$e9,$cb,$3c,$78,$f0,$78,$3c,$1e,$3c,$78,$88,$0a,$21,$ff,$1e,$0a,$d6,$01,$77,$ed,$c3,$66
.byte $66,$66,$ee,$ea,$2e,$2e,$6a,$0a,$bf,$14,$11,$11,$11,$33,$32,$0a,$01,$8f,$87,$0a,$31,$e1,$e1,$f1
.byte $0a,$21,$88,$88,$88,$0a,$b2,$14,$0a,$bf,$0a,$0a,$48,$0a,$ae,$1e,$11,$11,$33,$23,$23,$67,$8f,$8f
.byte $9f,$1f,$3f,$2e,$2e,$6e,$0f,$0f,$cf,$47,$67,$23,$23,$33,$0f,$0a,$41,$88,$88,$cc,$4c,$6e,$2e,$3f
.byte $1f,$0a,$f4,$21,$0a,$80,$ff,$0a,$80,$14,$32,$0a,$41,$c4,$0a,$41,$11,$0a,$97,$03,$8f,$8f,$cf,$47
.byte $67,$23,$23,$33,$f1,$f1,$78,$78,$3c,$3c,$3c,$1e,$00,$88,$88,$88,$cc,$c4,$e6,$f3,$33,$32,$76,$74
.byte $75,$fd,$f9,$fb,$c4,$c4,$cc,$88,$88,$00,$00,$00,$11,$0a,$41,$c3,$0a,$41,$79,$0a,$41,$0a,$ef,$14
.byte $8f,$cb,$e9,$f8,$e9,$cb,$8f,$cb,$e1,$78,$3c,$1e,$3c,$78,$e1,$78,$ff,$88,$0a,$31,$cf,$77,$0a,$f9
.byte $02,$e2,$6a,$ae,$ee,$66,$66,$22,$22,$0a,$bf,$14,$32,$0a,$01,$33,$11,$11,$11,$87,$0a,$41,$f1,$0a
.byte $31,$e1,$0a,$9d,$02,$88,$88,$0a,$b2,$0f,$ff,$0a,$d9,$02,$00,$ff,$8f,$cf,$47,$47,$0a,$18,$e1,$0a
.byte $01,$0a,$18,$3f,$2e,$6e,$4c,$0a,$08,$cc,$0a,$b0,$0c,$11,$11,$11,$33,$47,$cf,$8f,$8f,$9f,$1f,$1f
.byte $0f,$4c,$4c,$cc,$88,$88,$00,$ff,$0f,$11,$0a,$c4,$01,$ff,$0f,$0f,$8f,$0a,$c5,$00,$cf,$0f,$1f,$1f
.byte $0f,$0a,$21,$00,$88,$88,$cc,$4c,$6e,$2e,$2e,$0a,$f7,$0f,$0a,$80,$ff,$0a,$80,$1e,$32,$0a,$41,$c4
.byte $0a,$41,$0a,$97,$04,$11,$11,$0a,$38,$1e,$8f,$8f,$8f,$cf,$47,$67,$23,$f0,$0a,$01,$78,$78,$3d,$3d
.byte $e2,$e6,$c4,$cc,$88,$88,$88,$0a,$bf,$05,$11,$0a,$41,$c3,$0a,$41,$79,$0a,$41,$0a,$ef,$14,$e9,$f8
.byte $e9,$cb,$8f,$cb,$e9,$f8,$3c,$1e,$3c,$78,$e1,$78,$3c,$1e,$88,$0a,$31,$cc,$0a,$a6,$0b,$33,$0a,$dc
.byte $02,$77,$cf,$00,$11,$33,$77,$df,$db,$f1,$0a,$cf,$05,$11,$0a,$48,$8f,$8f,$cf,$67,$33,$0a,$0d,$e1
.byte $0a,$11,$e9,$ed,$77,$88,$88,$cc,$4c,$6e,$3f,$3d,$3c,$0a,$9d,$02,$88,$ee,$0a,$ce,$0a,$11,$77,$47
.byte $0a,$21,$8f,$87,$0a,$af,$01,$e1,$e1,$f3,$4c,$0a,$21,$88,$88,$0a,$a7,$0b,$11,$23,$67,$47,$47,$cf
.byte $9f,$9f,$1f,$7f,$4c,$cc,$88,$0a,$9d,$00,$ff,$0a,$99,$03,$0a,$58,$ef,$33,$11,$11,$11,$0a,$08,$0f
.byte $0a,$01,$8f,$0a,$01,$3f,$1f,$1f,$1f,$0a,$1c,$0a,$f4,$00,$88,$cc,$4c,$6e,$0a,$cf,$0a,$0a,$80,$ff
.byte $0a,$80,$15,$33,$0a,$26,$76,$fc,$ff,$0a,$28,$e6,$f3,$0a,$38,$00,$88,$ee,$0a,$a5,$0a,$11,$11,$0a
.byte $28,$3f,$2e,$0a,$97,$0a,$00,$00,$0a,$97,$02,$11,$77,$0a,$b7,$02,$c3,$c3,$0a,$38,$79,$78,$0a,$38
.byte $88,$cc,$0a,$cf,$03,$0a,$bf,$03,$11,$ff,$0a,$8f,$02,$e9,$0a,$a7,$03,$3c,$0a,$a7,$03,$f7,$1e,$0a
.byte $38,$ff,$0a,$97,$03,$fe,$0a,$97,$03,$87,$0a,$97,$03,$f1,$d3,$0a,$c7,$03,$0a,$80,$13,$0a,$dd,$02
.byte $00,$00,$fc,$77,$0a,$38,$b7,$8f,$0a,$cf,$03,$e1,$0a,$38,$fc,$3c,$0a,$38,$97,$ff,$88,$0a,$28,$ee
.byte $0a,$c1,$13,$33,$67,$0a,$a7,$02,$1f,$1f,$0a,$ef,$03,$88,$0a,$a9,$0e,$0a,$ae,$02,$0a,$9f,$02,$8f
.byte $0a,$e7,$03,$0f,$0f,$0a,$38,$2e,$3f,$0a,$b7,$03,$00,$cc,$0a,$b7,$12,$0a,$80,$ff,$0a,$80,$1a,$01
.byte $03,$0a,$21,$0c,$08,$0a,$2e,$0f,$01,$0a,$94,$02,$00,$0c,$0c,$04,$0a,$08,$0c,$0a,$04,$03,$04,$00
.byte $07,$0a,$18,$0c,$02,$03,$0f,$03,$0a,$9b,$01,$0a,$31,$0d,$0e,$0c,$0c,$0a,$97,$01,$07,$06,$06,$06
.byte $0a,$08,$0e,$0a,$c6,$00,$0a,$bd,$02,$01,$0a,$a3,$00,$07,$0c,$08,$08,$0f,$0a,$9f,$00,$06,$03,$03
.byte $0a,$18,$0a,$e8,$00,$0a,$97,$00,$0a,$0c,$0e,$0a,$8f,$00,$08,$0c,$04,$00,$0a,$f4,$02,$0a,$b4,$02
.byte $0a,$be,$00,$03,$03,$0c,$0a,$92,$02,$0c,$0a,$aa,$01,$0a,$11,$08,$0a,$90,$00,$0a,$cf,$01,$08,$00
.byte $0f,$0a,$1c,$08,$04,$06,$0e,$0a,$ef,$00,$03,$01,$0a,$e7,$02,$0b,$0c,$08,$0a,$a3,$01,$0d,$04,$0a
.byte $b7,$00,$0c,$0c,$0f,$0a,$04,$0c,$0a,$0b,$09,$0a,$c0,$03,$0d,$0e,$0a,$8f,$02,$0e,$02,$0a,$05,$06
.byte $06,$00,$0e,$06,$0a,$01,$0a,$f1,$04,$0a,$07,$0a,$d4,$01,$0a,$94,$00,$0a,$14,$0a,$97,$0c,$0a,$f7
.byte $00,$0a,$97,$03,$01,$03,$06,$06,$07,$0a,$97,$00,$01,$0a,$04,$0a,$98,$00,$08,$0a,$d7,$02,$0a,$80
.byte $ff,$0a,$80,$36,$03,$01,$0a,$49,$08,$0c,$03,$0a,$4a,$0f,$0a,$15,$0c,$0c,$0c,$0a,$2d,$0a,$08,$07
.byte $0a,$a7,$01,$03,$03,$0a,$97,$01,$0a,$01,$09,$0a,$97,$03,$0e,$0a,$18,$06,$06,$06,$0a,$97,$01,$03
.byte $03,$03,$0a,$a7,$01,$01,$01,$00,$08,$0a,$ce,$01,$08,$0a,$b7,$02,$00,$00,$03,$0a,$a7,$01,$00,$02
.byte $0a,$e9,$02,$03,$0a,$df,$06,$0a,$a7,$01,$0a,$51,$0a,$9d,$02,$0a,$b8,$00,$0a,$b7,$03,$01,$03,$0c
.byte $0a,$27,$09,$0a,$98,$02,$08,$08,$08,$0a,$b7,$01,$0a,$ef,$04,$01,$01,$01,$03,$0a,$97,$03,$0a,$a7
.byte $01,$0a,$51,$0c,$0c,$0a,$f7,$04,$04,$09,$0a,$8f,$03,$0a,$ff,$02,$0a,$41,$0a,$bf,$04,$03,$0a,$f0
.byte $06,$0a,$d7,$03,$0e,$0a,$b7,$01,$0a,$97,$00,$01,$0a,$9a,$01,$08,$0f,$0a,$13,$06,$06,$0e,$06,$06
.byte $0c,$08,$0a,$08,$0a,$b0,$05,$0a,$af,$01,$00,$00,$0c,$08,$0a,$d7,$08,$0a,$80,$94

data:
