   10REM **** MEGA GAMES CARTRIDGE MENU50A - 1V0 - 31-07-16 - DEJH ****   20:   30REM *** Set Screen MODE   40MODE3   50:   60REM *** Set operation of Escape Key - Not set-up, as yet!   70PROCEscapeOperationSet   80:   90REM *** Setup  100PROCSetUp  110:  120REM *** Turn on inverted text  130VDU17,0,17,129  140:  150REM *** Print header text - centered  160PRINTTAB(25,1);" Mega Games Cartridge  MENU ";  170:  180REM *** Turn off inverted text  190VDU17,1,17,128  200:  210REM *** Print screen Version # bottom left  220PRINTTAB(1,24);"V1.0";  230:  240REM *** Print number of Games top right  250PRINTTAB(64,1);"# of Games=";TotalGames%  260:  270REM *** Loop2 Set up the screen  280:  290REM *** Clear the top left information areas  300PRINTTAB(1,1)"                    ";:PRINTTAB(1,2)"                       ";  310:  320REM *** Loop 4  330:  340REM *** Display the current search if no page back  350IF Selection%<>139 THEN PRINTTAB(1,1)Search$(Search%);" ";  360:  370REM *** If search is game by Alpha or Publisher then  380REM *** show search selection and search match number  390IF Search%>0 AND Search%<3 THEN PRINT;CHR$(Selection1%);" ";SearchNumber1%  400:  410REM *** If search is Genre -  show chosen Genre and search match number  420IF Search%=3 THEN PRINTTAB(1,2);Genre$;" ";SearchNumber1%  430:  440REM *** Display all if requested  450IF Search%=0 THEN PROCDisplayList0  460:  470REM *** Display Alpha/Publisher selection  480:  490REM IF Search%=1, 2 OR 3 THEN DisplayList  500IF Search%<>0 THEN SearchNumber%=0:PROCDisplayList123  510:  520REM *** Turn Listing Flag off  530Listing%=0  540:  550REM *** Ensure default window  560VDU26  570:  580REM *** Display selection options  590PRINTTAB(2,21);"1 Games - 2 Games Alphabetically - 3 Games by Publisher - 4 Games by Genre";  600:  610REM *** Display page froward and page backwards options if valid  620:  630REM *** Clear the page forward and page backward option locations  640PRINTTAB(2,22);"               ";TAB(65,22);"           "  650:  660REM *** Only print Next Page Option if valid  670IF NumberOfEntries% >0 THEN PRINTTAB(65,22)CHR$(224);" Next Page";  680:  690REM *** Only print Previous Page Option if valid  700IF DisplayPage% >1 THEN PRINTTAB(2,22)CHR$(225);" Previous Page"  710:  720REM *** Clear bottom information area  730PRINTTAB(19,23);"                      ";  740:  750REM *** Loop3  760:  770REM *** Clear bottom line request and display Exit Option  780PRINTTAB(68,24)"(0 to EXIT)";:PRINTTAB(19,24)"     ";  790:  800REM *** Display Make Selection request in inverted text  810:  820REM *** Turn inverted text on  830VDU17,0,17,129  840:  850REM *** Print mesage  860PRINT" Make a Selection from above ";  870:  880REM *** Turn inverted text off  890VDU17,1,17,128  900:  910REM *** Clear area the after above message  920PRINT"       ";  930:  940REM *** Turn cursor on  950VDU23,1,1;0;0;0;  960:  970REM *** Flush the keyboard buffer  980*FX21,0  990: 1000REM *** Wait for user selection 1010REPEAT 1020: 1030REM *** Position Cursor 1040PRINTTAB(54,24); 1050: 1060REM *** Wait for input 1070Selection%=GET 1080: 1090REM *** Until a valid option is chosen 1100UNTIL Selection%>64 AND Selection%<=(PLINE%+64) OR Selection%>47 AND Selection%<53 OR NumberOfEntries% >0 AND Selection%=138 OR DisplayPage% >1 AND Selection%=139 1110: 1120REM *** Turn cursor off 1130VDU23,1,0;0;0;0; 1140: 1150REM *** Dispaly selection if between 0 and 4 1160IF Selection%>47 AND Selection%<53 THEN PRINT;Selection%-48; 1170: 1180REM *** Dispaly selection if between A and last choice (up to Q) 1190IF (Selection%>64 AND Selection%<=(PLINE%+64)) THEN PRINT;CHR$(Selection%); 1200: 1210REM *** Display Forward or Backwards Arrow if selected 1220IF Selection%=138 OR Selection%=139 THEN PRINT;CHR$(Selection%+86); 1230: 1240REM *** Clear selection from screen, after a short delay 1250PROCWAIT(2):PRINTTAB(54,24)" "; 1260: 1270REM *** If 0 exit program 1280IF Selection%=48 THEN PROCSCAPE 1290: 1300REM *** If selection is 1, 2, 3 or 4 convert to 0, 1, 2, 3 1310REM *** This is to match the input with any stored matrix 1320: 1330IF Selection%>48 AND Selection%<53 THEN Selection%=Selection%-1 1340: 1350REM *** Do menue display request 1360: 1370REM *** Listing% is to ensure that when a selection has been made (A>Z) 1380REM *** the list is displayed and a game start is not attempted! 1390: 1400REM *** If the selection equals 0 - Search all - Go to Loop 2 1410IF Selection%=48 THEN Search%=0:NumberOfEntries%=TotalGames%:NextAddress%=GameStart%:DisplayPage%=1:GOTO300 1420: 1430REM If the selection equals 1 - Search by Alpha 1440IF Selection%=49 THEN Listing%=1:Search%=1:DisplayPage%=1:NumberOfEntries%=TotalGames%:NextAddress%=GameStart%:SearchNumber2%=0:PROCAlphaPubGen 1450: 1460REM If the selection equals 2 - Search by Publisher 1470IF Selection%=50 THEN Listing%=1:Search%=2:DisplayPage%=1:NumberOfEntries%=TotalGames%:NextAddress%=GameStart%:SearchNumber2%=0:PROCAlphaPubGen 1480: 1490REM If the selection equals 3 - Search by Genre 1500IF Selection%=51 THEN Listing%=1:Search%=3:DisplayPage%=1:NumberOfEntries%=TotalGames%:NextAddress%=GameStart%:SearchNumber2%=0:PROCAlphaPubGen 1510: 1520REM *** On return from Search equal 1, 2 or 3 check for up "BACK" 1530IF Selection%=239 THEN NumberOfEntries%=0:GOTO 590 1540: 1550REM *** Check for Page forward with entries still to display - Loop 2 1560IF Selection%=138 AND NumberOfEntries%>0 THEN DisplayPage%=DisplayPage%+1:GOTO 300 1570: 1580REM *** Check for Page forward with NO  entries still to display  Loop 3 1590IF Selection%=138 AND NumberOfEntries%<1 THEN GOTO 780 1600: 1610REM *** Check for Page backwards with NO pages to go to - Loop 3 1620IF Selection%=139 AND DisplayPage%=1 THEN GOTO 780 1630: 1640REM *** Check for Page backwards with pages to go to - Loop 2 1650IF Selection%=139 THEN PROCPageBack:Selection%=0:GOTO 300 1660: 1670REM *** If not a game start selection - Loop 4 1680IF Listing%=1 THEN GOTO 350 1690: 1700REM *** Start of game selection loading 1710: 1720REM *** Remove CHR$ offset to obtain base selection number 1730Selection%=Selection%-64 1740: 1750REM *** Call Game start procedure 1760PROCGameStart 1770: 1780END 1790: 1800REM *** Do if Escape pressed 1810DEFPROCEscapeOperationSet 1820:REM *** TBD 1830ENDPROC 1840: 1850REM *** Define Variables 1860DEFPROCSetUp 1870: 1880REM *** Turn off Cursor Editing 1890*FX4,1 1900: 1910REM *** Turn off cursor 1920VDU23,1,0;0;0;0; 1930: 1940REM *** Storage Entry address:Storage address of first displayed entry 1950REM *** Storage for number of entries left, at the start of the listing 1960: 1970REM *** Display-titles list 1980DATA Games,Alphabetically,Publisher,Genre 1990: 2000REM *** Store display titles list in matrix for easy access 2010DIM Search$(4):FOR J%=0 TO 3:READ Search$(J%):NEXTJ% 2020: 2030REM *** SearchNumber% use #1 equals number of matching entries found 2040REM *** SearchNumber% use #2 used to index found entries when displaying 2050SearchNumber%=0 2060: 2070REM *** SearchNumber1% is a copy of entries found and used when 2080REM *** displaying information on the screen 2090SearchNumber1%=0 2100: 2110REM *** SearchNumber2% is used as an index in PROCDisplaList123 2120SearchNumber2%=0 2130: 2140REM *** Exit message flag F% equals 1 indicates "No index" 2150F%=0 2160: 2170REM *** Ensure Caps Lock is ON 2180*FX202,32 2190: 2200REM *** Define user characters 224 & 225 for up and down arrows 2210VDU23,224,24,24,24,24,24,126,60,24 2220VDU23,225,24,60,126,24,24,24,24,24 2230: 2240REM *** Set initial selection to List All 2250Selection%=0 2260: 2270REM *** Screen listing set to off 2280Listing%=0 2290: 2300REM *** Number of entries listed on screen 2310ScreenLines%=17 2320: 2330REM *** Nnumber of Genres 2340GenreNumber%=32 2350: 2360REM *** Count of displayed pages of 17 lines 2370DisplayPage%=1 2380: 2390REM *** FrontSlot=2 BackSlot=0 2400SLOT%=0 2410: 2420REM *** Start of First entry in the Index ROM 2430GameStart%=&8008 2440: 2450REM *** Number of Game entries (located at &8002) 2460NumberOfEntries%=0 2470: 2480REM *** Address of next entry in list - Set, initially, to start 2490NextAddress%=&8008 2500: 2510REM *** Number to add to GameStart% for next entry - Length of index 2520INDEXLEN%=56 2530: 2540REM *** Page Mode: 1=1 x 16k block needed : 2=2 x 16k blocks needed 2550PM%=1 2560: 2570REM *** Page Mode data location as an Offset from GameStart% 2580PMOFF%=46 2590: 2600REM *** Control Latch Data 2610CL%=0 2620: 2630REM *** Page Latch Data 2640PG%=0 2650: 2660REM *** Page Latch data location as an Offset from GameStart% 2670PGOFF%=47 2680: 2690REM *** Load Method 0=Reset, 1=Chain, 2=Exc, 3=Run, 4=Loader, 5=Other 2700LD%=0 2710: 2720REM *** Load Method data location as an Offset from GameStart% 2730LDOFF%=49 2740: 2750REM *** ROM Attribute data location as an Offset from GameStart% 2760RAOFF%=52 2770RBOFF%=53 2780: 2790REM *** Publisher's name, first letter, as an Offset from GameStart% 2800PNOFF%=48 2810: 2820REM *** Genre data location as an Offset from GameStart% 2830GEOFF%=54 2840: 2850REM *** Search information: Entered as 1,2,3,4 Used as 0,1,2,3 2860Search%=0 2870: 2880REM *** ROM Table address for the Electron 2890ROMTable%=&2A0 2900: 2910REM *** Game ROM type byte address, contents for ROM table 2920Romtype%=&8006 2930: 2940REM *** Read from ROM: Y%=ROM# : X=# bytes to fetch : A%=fetch or display 2950: 2960REM *** A=1=fetch A=0=output to display 2970DIMMC%35:REM Save 35 bytes 2980: 2990REM *** Start of m/c 3000P%=MC% 3010[OPT 0   \REM Don't list 3020CMP#0    \REM Compare A with 0 3030BEQ P%+6 \REM Branch to display loop if A=0 3040JSR&FFB9 \REM Call OSRDRM ROM# in Y address in &F6=(LSB) &F7=(MSB) 3050RTS      \REM Return with byte in A 3060.LP 3070TXA      \REM Transfer X to A 3080PHA      \REM and push to stack 3090TYA      \REM Transfer Y to A (not preserved in the Electron!) 3100PHA      \REM and push to stack 3110JSR&FFB9 \REM Call OSRDRM ROM# in Y,address in &F6=(LSB) &F7=(MSB) 3120JSR&FFEE \REM Call OSWRCH Contents of A to Screen 3130PLA      \REM Restore Y 3140TAY      \REM to reinstate ROM# 3150INC&F6   \REM Increment ROM LSB address 3160BNE P%+4 \REM If not rolled over to 0then jump over next instruction 3170INC&F7   \REM If&F6=0then increment ROM MSB address 3180PLA      \REM Pull from stack 3190TAX      \REM and transfer to X 3200DEX      \REM Decrement string length 3210BNE LP   \REM If not 0 then loop 3220RTS      \REM Return when done 3230] 3240: 3250REM *** Locate the Cartridge 3260PROCFindSlot 3270: 3280REM *** Load the total number of Games 3290PROCLoadEntries 3300: 3310REM *** Allocate room for storage matrix 3320DIMLOCATION%(18) 3330: 3340REM *** Start Location storage 3350DIM NextAddress%(14) 3360: 3370REM *** Start Number of Entries storage 3380DIM NumberOfEntries%(14) 3390: 3400REM *** Used to store value of SearchNumber2% for Page Back 3410DIM SearchNumber2%(14) 3420: 3430REM *** Total Number of games found for Alpha or Publisher search 3440DIM AlphaSearch%(TotalGames%) 3450: 3460ENDPROC 3470: 3480REM *** Fetch Count of Entries 3490DEFPROCLoadEntries 3500: 3510REM *** Load, from the index, the total number of games 3520A%=1:TotalGames%=FNrm(&8002,SLOT%) 3530: 3540REM *** Preload NumberOfEntries for initial listing 3550NumberOfEntries%=TotalGames% 3560: 3570ENDPROC 3580: 3590REM *** Icrement to the next Entry 3600DEFPROCAddressIncrement 3610: 3620REM *** Point to next entry in list 3630NextAddress%=NextAddress%+INDEXLEN% 3640: 3650REM *** Decrement entries% counter 3660IF Search%>0 THEN NumberOfEntries%=NumberOfEntries%-1 3670: 3680ENDPROC 3690: 3700REM *** Page Backwards calculations 3710DEFPROCPageBack 3720: 3730DisplayPage%=DisplayPage%-1 3740: 3750NextAddress%=NextAddress%(DisplayPage%) 3760: 3770NumberOfEntries%=NumberOfEntries%(DisplayPage%) 3780: 3790SearchNumber2%=SearchNumber2%(DisplayPage%) 3800: 3810ENDPROC 3820: 3830REM *** ESCAPE key pressed 3840GOTO40 3850REM *** CLOSE 3860DEFPROCSCAPE 3870: 3880REM *** Clear the bottom information line 3890PRINTTAB(19,24)"                                                            "; 3900: 3910REM *** Turn on inverted text 3920VDU17,0,17,129 3930: 3940REM *** Print message 3950PRINTTAB(33,24)" Bye Bye "; 3960: 3970REM *** Turn off inverted text 3980VDU17,1,17,128 3990: 4000REM *** Leave Bye Bye message for a short time 4010PROCWAIT(5) 4020: 4030REM *** Turn on Cursor Editing 4040*FX4,0 4050: 4060REM *** Turn on cursor 4070VDU23,1,1;0;0;0; 4080: 4090REM *** Clear the screen 4100CLS 4110: 4120REM *** Leave the cursor on second line - More visable! 4130PRINTTAB(0,2); 4140: 4150REM *** Inform of no index if true 4160IF F%=1 THEN PRINTTAB(35,2);"NO INDEX!" 4170: 4180END 4190: 4200REM Wait routine 4210DEFPROCWAIT(U%) 4220FORW%=0 TO 500*U% 4230: 4240NEXT W% 4250: 4260ENDPROC 4270: 4280REM *** Search for Alpha or Pub 4290DEFPROCSORT 4300ENDPROC 4310: 4320REM *** Search for Alpha 4330DEFPROCSRCHALPHA 4340: 4350REM *** If no entries set for exit 4360IF NumberOfEntries%<1 THEN LVALID%=1 4370: 4380REM *** Set for m/c read 4390A%=1 4400: 4410REM *** If there are entries check fo selection match 4420IF LVALID%=0 AND Search%=1 AND (FNrm(NextAddress%,SLOT%)=Selection%) THEN LVALID%=1 4430: 4440REM *** If no match found go and point to the next entry 4450IF LVALID%=0 THEN PROCAddressIncrement 4460: 4470ENDPROC 4480: 4490REM *** Set-up Search options 4500DEFPROCAlphaPubGen 4510: 4520REM *** Clear the top left information areas 4530PRINTTAB(1,1)"                    ";:PRINTTAB(1,2)"                       "; 4540: 4550REM *** Clear bottom display area 4560VDU28,0,22,79,20:CLS 4570: 4580REM *** Clear text window 4590VDU28,14,19,64,3:CLS 4600REM *** VDU28,14,19,64,3:A%=6:CALL&E00 4610: 4620REM *** If Genre selected go and list available Genres 4630IF Search%=3 THEN PROCListGenre 4640: 4650REM *** Remove text windows 4660VDU26 4670: 4680REM *** Turn on inverted text 4690VDU17,0,17,129 4700: 4710REM *** Print slected choice - Alphabetically 4720IF Search%=1 THEN PRINTTAB(19,23);" Games Alphabetically "; 4730: 4740REM *** Print slected choice - Publisher 4750IF Search%=2 THEN PRINTTAB(19,23);" Games by Publisher "; 4760: 4770REM *** Print slected choice - Publisher 4780IF Search%=3 THEN PRINTTAB(19,23);" Games by Genre "; 4790: 4800REM *** Print options - Alphabetically 4810IF Search%=1 THEN PRINTTAB(19,24);" Chose #, Letter between A > Z or ";CHR$(225);" Back "; 4820: 4830REM *** Print options - Publisher 4840IF Search%=2 THEN PRINTTAB(19,24);" Chose Letter between A > Z or ";CHR$(225);" Back "; 4850: 4860REM *** Print options - Genre 4870IF Search%=3 THEN PRINTTAB(19,24);" Chose a Genre from above or ";CHR$(225);" Back "; 4880: 4890REM *** Turn off inverted text 4900VDU17,1,17,128 4910: 4920REM *** Turn on the cursor 4930VDU23,1,1;0;0;0; 4940: 4950REM *** Clear the Escape option 4960PRINTTAB(67,24)"            "; 4970: 4980REM *** Set key-entry location - Alphabetically 4990IF Search%=1 THEN PRINTTAB(61,24); 5000: 5010REM *** Set key-entry location - Publisher 5020IF Search%=2 THEN PRINTTAB(58,24); 5030: 5040REM *** Set key-entry location - Genre 5050IF Search%=3 THEN PRINTTAB(56,24); 5060: 5070REM *** Key entry for Search 5080: 5090REM *** Alphabetically 5100IF Search%=1 THEN PROCKey1 5110: 5120REM *** Publisher 5130IF Search%=2 THEN PROCKey2 5140: 5150REM *** Genre 5160IF Search%=3 THEN PROCKey3 5170: 5180REM *** Turn off the cursor 5190VDU23,1,0;0;0;0; 5200: 5210REM *** Show selection for short time - Alphabetically 5220IF Search%=1 THEN PRINTTAB(61,24);CHR$(Selection%);:PROCWAIT(2) 5230: 5240REM *** Show selection for short time - Publisher 5250IF Search%=2 THEN PRINTTAB(58,24);CHR$(Selection%);:PROCWAIT(2) 5260: 5270REM *** Show selection for short time - Genre 5280IF Search%=3 THEN PRINTTAB(56,24);CHR$(Selection%);:PROCWAIT(2) 5290: 5300REM *** Clear key-entry location - Alphabetically 5310IF Search%=1 THEN PRINTTAB(61,24)" "; 5320: 5330REM *** Clear key-entry location - Publisher 5340IF Search%=2 THEN PRINTTAB(58,24)" "; 5350: 5360REM *** Clear key-entry location - Genre 5370IF Search%=3 THEN PRINTTAB(56,24)" "; 5380: 5390REM *** If BACK then exit 5400IF Selection%=139 THEN PRINTTAB(56,24)"                ";:VDU28,14,19,64,3:CLS:VDU26:Selection%=239:ENDPROC 5410: 5420REM *** Find all that match the selection loop 5430: 5440REPEAT 5450: 5460REM *** Search routines 5470: 5480IF Search%<>1 THEN GOTO 5530 5490A%=2:X%=SLOT%:Y%=Selection% 5500CALL&E00,NextAddress%,NumberOfEntries%,INDEXLEN%,AlphaSearch%(0),SearchNumber% 5510GOTO 5700 5520: 5530IF Search%<>2 THEN GOTO 5580 5540A%=4:X%=SLOT%:Y%=Selection% 5550CALL&E00,NextAddress%,NumberOfEntries%,INDEXLEN%,AlphaSearch%(0),SearchNumber%,PNOFF% 5560GOTO 5700 5570: 5580IF Search%<>3 THEN GOTO 5640 5590A%=3:X%=SLOT%:Y%=Selection% 5600CALL&E00,NextAddress%,NumberOfEntries%,INDEXLEN%,AlphaSearch%(0),SearchNumber%,GEOFF% 5610GOTO 5700 5620: 5630REM *** Decrement number of entries 5640NumberOfEntries%=NumberOfEntries%-1 5650: 5660REM *** Add index length to next address to point to next entry 5670NextAddress%=NextAddress%+INDEXLEN% 5680: 5690REM *** Until entries equal 0 5700UNTIL NumberOfEntries%<1 5710: 5720REM *** Load variables for displaying selected list 5730NumberOfEntries%=SearchNumber% 5740: 5750REM *** Make a copy of SearchNumber for display purposes 5760SearchNumber1%=SearchNumber% 5770: 5780REM *** Make a copy of Selection for display purposes 5790Selection1%=Selection% 5800: 5810REM *** Remove "Searching" 5820PRINTTAB(56,24)"               "; 5830: 5840REM *** Clear text window 5850IF Search%=3 THEN VDU28,14,19,64,3:CLS:VDU26 5860REM *** IF Search%=3 THEN VDU28,14,19,64,3:A%=6:CALL&E00:VDU26 5870: 5880REM *** For Genre convert Selection% into number 5890IF Search%=3 THEN PROCGenreCount 5900: 5910ENDPROC 5920: 5930REM *** List Game Catagories 5940DEFPROCListGenre 5950: 5960RESTORE 5980 5970: 5980DATA Adventure (graphics),Adventure (text),Adventure (txt/graph),Adventure (arcade),Avoid 'em,Ball Control,Ball Game,Bat 'n' Ball,Beat 'em Up,Board Game,Card Game,Catch 'em,Collect 'em Up,Driving,Educational,Football,Lunar Landing 5990: 6000DATA Maze,Platform,Puzzle,Quiz,RPG,Run 'n' Gun,Run 'n' Jump,Save 'em Up,Shooter,Simulation,Space,Sport,Strategy,Word Games,Traditional Games 6010: 6020REM *** Set AA% equal to start of line : AB% equal to list start number 6030AA%=0 6040: 6050AB%=0 6060: 6070REPEAT 6080: 6090REM *** List Genres 0 to 9 in two colums 6100READ I$ 6110: 6120READ J$ 6130: 6140PRINTTAB(0,AA%);AB%;" ";I$; 6150: 6160PRINTTAB(27,AA%);AB%+1;" ";J$; 6170: 6180AA%=AA%+1 6190: 6200AB%=AB%+2 6210: 6220UNTIL AA%=5 6230: 6240REM *** Set to "A" to list alphabelically 6250AB%=65 6260: 6270REPEAT 6280: 6290READ I$ 6300: 6310READ J$ 6320: 6330PRINTTAB(0,AA%);CHR$(AB%);" ";I$; 6340: 6350PRINTTAB(27,AA%);CHR$(AB%+1);" ";J$; 6360: 6370AA%=AA%+1 6380: 6390AB%=AB%+2 6400: 6410UNTIL AA%=16 6420: 6430ENDPROC 6440: 6450REM *** OSRDRM Read a Byte from ROM 6460REM *** Call with byte=FNrm(addr,rom) 6470DEFFNrm(!&F6,Y%)=(USRMC%)AND&FF 6480: 6490REM *** List All Titles (Search%=0) 6500DEFPROCDisplayList0 6510: 6520REM *** Enter with: 6530REM *** NumberOfEntries% equal to total games 6540REM *** NextAddress% equal to start of games list 6550: 6560REM *** Clear text window 6570VDU28,14,19,64,3:CLS 6580REM *** VDU28,14,19,64,3:A%=6:CALL&E00 6590: 6600REM *** StartLine%() equals the stored entry start address 6610NextAddress%(DisplayPage%)=NextAddress% 6620: 6630REM *** PLINE% equals the printed line position 6640PLINE%=0 6650: 6660REM *** StartNumber%() equals the stored number of entries 6670NumberOfEntries%(DisplayPage%)=NumberOfEntries% 6680: 6690REM *** POSCHR%=Position of entry text when being displayed 6700POSCHR%=0 6710: 6720REM *** LVALID% is set =1 if a valid line is found 6730LVALID%=0 6740: 6750REM *** Main loop start 6760REM REPEAT 6770: 6780REM *** Check if there is nothing to display 6790IF NumberOfEntries%<1 AND PLINE%=0 THEN PRINTTAB(19,1)"No Entries!" 6800: 6810REM *** Print the letter for the next displayed line 6820IF NumberOfEntries%<0 THEN GOTO 6870 6830: 6840Y%=46:A%=0:X%=SLOT% 6850CALL&E00,NextAddress%,PLINE%,NumberOfEntries%,INDEXLEN%,ScreenLines%,LOCATION%(0) 6860: 6870ENDPROC 6880: 6890REM *** List Alpha Titles (Search%=1) 6900DEFPROCDisplayList123 6910: 6920REM *** Enter with: 6930REM *** NumberOfEntries% equals number of entries found 6940REM *** AlphaSearch() contains address of found entries 6950REM *** SearchNumber equals counter for AlphaSearch() 6960: 6970REM *** Clear text window 6980VDU28,14,19,64,3:CLS 6990REM *** VDU28,14,19,64,3:A%=6:CALL&E00 7000: 7010REM *** StartLine%() equals the stored entry start address 7020NextAddress%(DisplayPage%)=NextAddress% 7030: 7040REM *** NumberOfEntries%() equals the stored number of entries 7050NumberOfEntries%(DisplayPage%)=NumberOfEntries% 7060: 7070REM *** StartNumber2%() equals the found number of entries 7080SearchNumber2%(DisplayPage%)=SearchNumber2% 7090: 7100REM *** PLINE% equals the printed line position 7110PLINE%=0 7120: 7130REM *** POSCHR%=Position of entry text when being displayed 7140REM POSCHR%=0 7150: 7160REM *** LVALID% is set =1 if a valid line is found 7170REM LVALID%=0 7180: 7190REM *** Loop start 7200REM REPEAT 7210: 7220REM *** Check if there is nothing to display 7230IF NumberOfEntries%<1 AND PLINE%=0 THEN PRINTTAB(19,1)"No Entries!"; 7240: 7250REM *** Print the letter for the next displayed line 7260IF NumberOfEntries%<1 THEN GOTO 7310 7270: 7280Y%=46:A%=1:X%=SLOT% 7290CALL&E00,NextAddress%,PLINE%,NumberOfEntries%,AlphaSearch%(0),ScreenLines%,LOCATION%(0),SearchNumber2% 7300: 7310ENDPROC 7320: 7330REM *** Key entry procedure - Alphabetically 7340DEFPROCKey1 7350: 7360REM *** Flush the keyboard buffer 7370*FX21,0 7380: 7390REPEAT 7400: 7410REM *** Wait for key entry 7420Selection%=GET 7430: 7440REM *** Until #, A to Z or BACK is selected - Alphabetically 7450UNTIL Selection%=35 OR Selection%>64 AND Selection%<91 OR Selection%=139 7460: 7470ENDPROC 7480: 7490REM *** Key entry procedure - Publisher 7500DEFPROCKey2 7510: 7520REPEAT 7530: 7540REM *** Flush the keyboard buffer 7550*FX21,0 7560: 7570REM *** Wait for key entry 7580Selection%=GET 7590: 7600REM *** Until #, A to Z or BACK is selected - Alphabetically 7610UNTIL Selection%>64 AND Selection%<91 OR Selection%=139 7620: 7630ENDPROC 7640: 7650REM *** Key entry procedure - Genre 7660DEFPROCKey3 7670: 7680REM *** Flush the keyboard buffer 7690*FX21,0 7700: 7710REPEAT 7720: 7730REM *** Wait for key entry 7740Selection%=GET 7750: 7760UNTILSelection%>47 AND Selection%<58 OR Selection%>64 AND Selection%<87 OR Selection%=139 7770: 7780ENDPROC 7790: 7800REM *** Find a match in the index and store its location - Alphabeticaly 7810DEFPROCFind1 7820IF FNrm(NextAddress%,SLOT%)=Selection% THEN AlphaSearch%(SearchNumber%)=NextAddress%:SearchNumber%=SearchNumber%+1 7830: 7840ENDPROC 7850: 7860REM *** Find a match in the index and store its location - Alph Numbers 7870DEFPROCFind1A 7880Find%=FNrm(NextAddress%,SLOT%) 7890: 7900IF Find%>47 AND Find%<58 THEN AlphaSearch%(SearchNumber%)=NextAddress%:SearchNumber%=SearchNumber%+1 7910: 7920ENDPROC 7930: 7940REM *** Find a match in the index and store its location - Publisher 7950DEFPROCFind2 7960: 7970IF FNrm(NextAddress%+FNrm(NextAddress%+PNOFF%,SLOT%),SLOT%)=Selection% THEN AlphaSearch%(SearchNumber%)=NextAddress%:SearchNumber%=SearchNumber%+1 7980: 7990ENDPROC 8000: 8010REM *** Find a match in the index and store its location - Genre 8020DEFPROCFind3 8030: 8040A%=1:IF FNrm(NextAddress%+GEOFF%,SLOT%)=Selection% THEN AlphaSearch%(SearchNumber%)=NextAddress%:SearchNumber%=SearchNumber%+1 8050: 8060A%=1:IF FNrm(NextAddress%+GEOFF%+1,SLOT%)=Selection% THEN AlphaSearch%(SearchNumber%)=NextAddress%:SearchNumber%=SearchNumber%+1 8070: 8080ENDPROC 8090: 8100REM *** Turn Selection into # from 0 to max # of Genre for Genra display 8110DEFPROCGenreCount 8120: 8130REM *** Convert selections between 0 to 9 8140IF Selection%>47 AND Selection%<58 THEN GenreSelection%=Selection%-48 8150: 8160REM *** Convert selections between A and last letter 8170IF Selection%>64 AND Selection%<87 THEN GenreSelection%=Selection%-55 8180: 8190REM *** Find Genre selection 8200RESTORE 5980:FOR M%=0 TO GenreSelection%:READ Genre$:NEXT 8210: 8220ENDPROC 8230: 8240REM ********************************************** 8250: 8260REM *** Check which Slot the Cartridge is in 8270DEFPROCFindSlot 8280: 8290REM *** Check if the cartridge is in slot 0 - Looking for 17 and A3 8300A%=1:IF FNrm(&8000,0)<>&17 THEN GOTO 8340 8310A%=1:IF FNrm(&8001,0)=&A3 THEN SLOT%=0:ENDPROC 8320: 8330REM *** Check if the cartridge is in slot 2 - Looking for 17 and A3 8340A%=1:IF FNrm(&8000,2)<>&17 THEN GOTO 8380 8350A%=1:IF FNrm(&8001,2)=&A3 THEN SLOT%=2:ENDPROC 8360: 8370REM *** If no index is found go to exit F%=1 displays "no index" 8380F%=1:PROCSCAPE 8390: 8400REM *** Start the selected Game 8410DEFPROCGameStart 8420: 8430REM *** Clear the screen ready for Loading Message 8440CLS 8450: 8460REM *** Get the address of the chosen entry if ALL selected 8470IF Search%=0 THEN NextAddress%=LOCATION%(Selection%-1) 8480: 8490Selection%=(Selection%-1)+((DisplayPage%-1)*ScreenLines%) 8500: 8510REM *** Get the address of the chosen entry if NOT ALL selected 8520IF Search%<>0 THEN NextAddress%=AlphaSearch%(Selection%) 8530: 8540REM *** Command String start offset 8550LSOFF%=50 8560: 8570REM *** Command string length offset 8580SCOFF%=51 8590: 8600REM *** Load variables from ROM 8610A%=1 : PM%=FNrm((NextAddress%+PMOFF%),SLOT%) : REM * Page Mode 8620A%=1 : PG%=FNrm((NextAddress%+PGOFF%),SLOT%) : REM * Page Number 8630A%=1 : LD%=FNrm((NextAddress%+LDOFF%),SLOT%) : REM * Load Method 8640A%=1 : LS%=FNrm((NextAddress%+LSOFF%),SLOT%) : REM * Load String start 8650A%=1 : SC%=FNrm((NextAddress%+SCOFF%),SLOT%) : REM * Load String count 8660: 8670REM *** Set-up the Page Latch and Control Latch data 8680: 8690REM *** If PageMode=1 (16K game) Control Latch bit 2 = H 8700IF PM%=1 THEN CL%=4 : REM * 00000100 8710: 8720REM *** If PageMode=1 and stored page is in the upper half CL bit 1=H 8730IF PM%=1 AND PG%>127 THEN CL%=CL%+2 : REM * 00000110 8740: 8750REM *** Insert Game ROM into ROM Table 8760PROCROMIinsertion 8770: 8780REM *** Get String for Load method 1, 2, 3 or 4 8790IF LD%>1 AND LD%<5 THEN PROCGetString 8800: 8810REM *** Start game loading 8820IF LD%=0 THEN PROCRomfs 8830IF LD%=1 THEN PROCChain 8840IF LD%=2 THEN PROCExec 8850IF LD%=3 THEN PROCRun 8860IF LD%=4 THEN PROCStar 8870IF LD%=5 THEN PROCLoader 8880: 8890REM *** Shouldn't ever get here! 8900END 8910: 8920REM *** ROMFS loader 8930DEFPROCRomfs 8940: 8950REM $ CALL !-4 8960: 8970END 8980: 8990REM *** CHAIN loader 9000DEFPROCChain 9010: 9020END 9030: 9040REM *** *EXEC Loader 9050DEFPROCExec 9060: 9070END 9080: 9090REM *** *RUN Loader 9100DEFPROCRun 9110: 9120END 9130: 9140REM *** Entry needs a m/c Loader 9150DEFPROCLoader 9160: 9170END 9180: 9190REM *** Entry needs a * Command 9200DEFPROCStar 9210: 9220OSCLI String$ 9230: 9240END 9250: 9260REM *** Get String for Load method 1, 2, 3 or 4 9270DEFPROCGetString 9280: 9290REM *** Get character length 9300: 9310FOR Z%=0 TO SC%-1 9320: 9330A%=1 : String$=String$+CHR$(FNrm((&8000+LS%+Z%),SLOT%+1)) 9340: 9350NEXT Z% 9360: 9370ENDPROC 9380: 9390REM *** Insert Game ROM into ROM Table 9400DEFPROCROMIinsertion 9410: 9420REM *** Remove Menu ROM from ROM Table to stop system crash 9430?(ROMTable%+SLOT%+1)=0 9440: 9450REM *** Write data to Page Latch and Control Latch 9460?&FC00=PG% : ?&FC08=CL% 9470: 9480REM *** Add newly inserted ROM to ROM Table 9490A%=1:?(ROMTable%+SLOT%+1)=FNrm(Romtype%,SLOT%+1) 9500: 9510REM *** Add newly inserted ROM is 32K then add 2nd ROM to ROM Table 9520IF PM%=2 THEN A%=1:?(ROMTable%+SLOT%)=FNrm(Romtype%,SLOT%) 9530: 9540ENDPROC 9550: 9560END>