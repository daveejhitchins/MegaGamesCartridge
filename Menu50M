   10REM **** MEGA GAMES CARTRIDGE MENU50x - 1V3 - 13-05-17 - DEJH ****   20REM **** Save as MENU50xP when Packed   30REM **** (c) 2017 Retro Hardware xVxx  << Copyright string   40REM **** RH MGC Menu xVx 2017 << Version/Help string   50REM **** When creating FS ROM Save MGCJBN as FASTD   60REM **** When creating FS ROM Save MENU50xP as MENU   70REM **** 1V1 - Added suport for Utilities and Applications   80REM **** and restructured the Diagnostics screen   90REM **** 1V1a - Fixed Genre display issue & added Game Name and  100REM **** position in Index  101REM **** 1V3 - Added FX200,3 to clear memory on break to fix a  102REM **** problem with ADFS loosing its workspace  110:---  120REM *** :---  << Can be found and replaced Globally!  130:---  140REM *** Flush Sound Buffer 3  150*FX21,7  160:---  163REM **** Show the title screen  166*MGC 50  169:  170REM *** Set Screen MODE  180MODE3  190:---  200REM *** Setup  210PROCSetUp  220:---  230REM *** Turn on inverted text  240PROCinv(1)  250:---  260REM *** Print header text - centered  270PRINTTAB(24,1);" Mega Games Cartridge  MENU "  280:---  290REM *** Turn off inverted text  300PROCinv(0)  310:---  320REM *** Print screen Version # bottom left  330PRINTTAB(1,24);"V1.3";  340:---  350REM *** Print number of Games top right  360PRINTTAB(64,1);"# of Games=";TotalGames%  370:---  380REM *** Loop2 Set up the screen  390:---  400REM *** Clear the top left information areas  410PROCclearline(1,1,20):PROCclearline(1,2,23)  420:---  430REM *** Loop 4  440:---  450REM *** Display the current search if no page back  460IF Selection%<>139 THEN PRINTTAB(1,1)Search$(Search%);" ";  470:---  480REM *** If search is game by Alpha or Publisher then  490REM *** show search selection and search match number  500IF Search%>0 AND Search%<3 THEN PRINT;CHR$(Selection1%);" ";SearchNumber1%  510:---  520REM *** If search is Genre -  show chosen Genre and search match number  530IF Search%=3 THEN PRINTTAB(1,2);Genre$;" ";SearchNumber1%  540:---  550REM *** Display all if requested  560IF Search%=0 THEN PROCDisplayList0  570:---  580REM *** Display Alpha/Publisher selection  590:---  600REM IF Search%=1, 2 OR 3 THEN DisplayList  610IF Search%<>0 THEN SearchNumber%=0:PROCDisplayList123  620:---  630REM *** Turn Listing Flag off  640Listing%=0  650:---  660REM *** Ensure default window  670VDU26  680:---  690REM *** Display selection options  700PRINTTAB(2,21);"1 Games - 2 Games Alphabetically - 3 Games by Publisher - 4 Games by Genre";  710:---  720REM *** Display page froward and page backwards options if valid  730:---  740REM *** Clear the page forward and page backward option locations  750PROCclearline(2,22,15):PROCclearline(65,22,11)  760:---  770REM *** Only print Next Page Option if valid  780IF NumberOfGames% >0 THEN PRINTTAB(65,22)CHR$(224);" Next Page";  790:---  800REM *** Only print Previous Page Option if valid  810IF DisplayPage% >1 THEN PRINTTAB(2,22)CHR$(225);" Previous Page"  820:---  830REM *** Clear bottom information area  840PROCclearline(19,23,22)  850:---  860REM *** Loop3  870:---  880REM *** Clear bottom line request and display Exit Option  890PRINTTAB(68,24)"(0 to EXIT)";:PROCclearline(19,24,5)  900:---  910REM *** Display Make Selection request in inverted text  920:---  930REM *** Turn inverted text on  940PROCinv(1)  950:---  960REM *** Print mesage  970PRINT" Make a Selection from above ";  980:---  990REM *** Turn inverted text off 1000PROCinv(0) 1010:--- 1020REM *** Clear area the after above message 1030PRINTSPC(7); 1040:--- 1050REM *** Turn cursor on 1060PROCcursor(1) 1070:--- 1080REM *** Flush the keyboard buffer 1090*FX21,0 1100:--- 1110REM **** Notify, if Testing is TRUE 1120IF Diagnostic%=1 THEN PRINTTAB(6,24);"D"; ELSE PRINTTAB(6,24);" "; 1130:--- 1140REM *** Wait for user selection 1150REPEAT 1160:--- 1170REM *** Position Cursor 1180PRINTTAB(54,24); 1190:--- 1200REM *** Wait for input 1210Selection%=GET 1220:--- 1230REM *** Until a valid option is chosen 1240UNTIL Selection%>64 AND Selection%<=(PLINE%+64) OR Selection%>47 AND Selection%<53 OR NumberOfGames% >0 AND Selection%=138 OR DisplayPage% >1 AND Selection%=139 OR Selection%=125 1250:--- 1260REM **** Notify if Diagnostic is switched on - Toggle action 1270IF Selection%=125 THEN Diagnostic%=1-Diagnostic%:GOTO1120 1290:--- 1300REM *** Turn cursor off 1310PROCcursor(0) 1320:--- 1330REM *** Display selection if between 0 and 4 1340IF Selection%>47 AND Selection%<53 THEN PRINT;Selection%-48; 1350:--- 1360REM *** Display selection if between A and last choice (up to Q) 1370IF (Selection%>64 AND Selection%<=(PLINE%+64)) THEN PRINT;CHR$(Selection%); 1380:--- 1390REM *** Display Forward or Backwards Arrow if selected 1400IF Selection%=138 OR Selection%=139 THEN PRINT;CHR$(Selection%+86); 1410:--- 1420REM *** Clear selection from screen, after a short delay 1430PROCWAIT(1):PRINTTAB(54,24)" "; 1440:--- 1450REM *** If 0 exit program 1460IF Selection%=48 THEN PROCSCAPE 1470:--- 1480REM *** If selection is 1, 2, 3 or 4 convert to 0, 1, 2, 3 1490REM *** This is to match the input with any stored matrix 1500:--- 1510IF Selection%>48 AND Selection%<53 THEN Selection%=Selection%-1 1520:--- 1530REM *** Do menu display request 1540:--- 1550REM *** Listing% is to ensure that when a selection has been made (A>Z) 1560REM *** the list is displayed and a game start is not attempted! 1570:--- 1580REM *** If the selection equals 0 - Search all - Go to Loop 2 1590IF Selection%=48 THEN Search%=0:NumberOfGames%=TotalGames%:NextAddress%=GameStart%:DisplayPage%=1:GOTO410 1600:--- 1610REM If the selection equals 1 - Search by Alpha 1620IF Selection%=49 THEN Listing%=1:Search%=1:DisplayPage%=1:NumberOfGames%=TotalGames%:NextAddress%=GameStart%:SearchNumber2%=0:PROCAlphaPubGen 1630:--- 1640REM If the selection equals 2 - Search by Publisher 1650IF Selection%=50 THEN Listing%=1:Search%=2:DisplayPage%=1:NumberOfGames%=TotalGames%:NextAddress%=GameStart%:SearchNumber2%=0:PROCAlphaPubGen 1660:--- 1670REM If the selection equals 3 - Search by Genre 1680IF Selection%=51 THEN Listing%=1:Search%=3:DisplayPage%=1:NumberOfGames%=TotalGames%:NextAddress%=GameStart%:SearchNumber2%=0:PROCAlphaPubGen 1690:--- 1700REM *** On return from Search equal 1, 2 or 3 check for up "BACK" 1710IF Selection%=239 THEN Search%=0:NumberOfGames%=TotalGames%:NextAddress=GameStart%:Selection%=0:GOTO 460 1720:--- 1730REM *** Check for Page forward with entries still to display - Loop 2 1740IF Selection%=138 AND NumberOfGames%>0 THEN DisplayPage%=DisplayPage%+1:GOTO 410 1750:--- 1760REM *** Check for Page forward with NO  entries still to display  Loop 3 1770IF Selection%=138 AND NumberOfGames%<1 THEN GOTO 890 1780:--- 1790REM *** Check for Page backwards with NO pages to go to - Loop 3 1800IF Selection%=139 AND DisplayPage%=1 THEN GOTO 890 1810:--- 1820REM *** Check for Page backwards with pages to go to - Loop 2 1830IF Selection%=139 THEN PROCPageBack:Selection%=0:GOTO 410 1840:--- 1850REM *** If not a game start selection - Loop 4 1860IF Listing%=1 THEN GOTO 460 1870:--- 1880REM *** Start of game selection loading 1890:--- 1900REM *** Remove CHR$ offset to obtain base selection number 1910Selection%=Selection%-64 1920:--- 1930REM *** Call Game start procedure 1940PROCGameStart 1950:--- 1960END 1970:--- 1980REM *** Define Variables 1990DEFPROCSetUp 2000:--- 2010REM *** Turn off Cursor Editing 2020*FX4,1 2030:--- 2040REM *** Turn off cursor 2050PROCcursor(0) 2060:--- 2070REM *** Storage Entry address: Storage address of first displayed entry 2080REM *** Storage for number of entries left, at the start of the listing 2090:--- 2100REM *** Display-titles list 2110DATA Games,Alphabetically,Publisher,Genre 2120:--- 2130REM *** Store display titles list in matrix for easy access 2140DIM Search$(4):FOR J%=0 TO 3:READ Search$(J%):NEXTJ% 2150:--- 2160REM *** SearchNumber% use #1 equals number of matching entries found 2170REM *** SearchNumber% use #2 used to index found entries when displaying 2180SearchNumber%=0 2190:--- 2200REM *** SearchNumber1% is a copy of entries found and used when 2210REM *** displaying information on the screen 2220SearchNumber1%=0 2230:--- 2240REM *** SearchNumber2% is used as an index in PROCDisplaList123 2250SearchNumber2%=0 2260:--- 2270REM *** Command String start offset 2280LSOFF%=50 2290:--- 2300REM *** Command string length offset 2310SCOFF%=51 2320:--- 2330REM *** Exit message flag F% equals 1 indicates "No index" 2340F%=0 2350:--- 2360REM *** Ensure Caps Lock is ON 2370*FX202,32 2380:--- 2390REM *** Define user characters 224 & 225 for up and down arrows 2400VDU23,224,24,24,24,24,24,126,60,24 2410VDU23,225,24,60,126,24,24,24,24,24 2420:--- 2430REM **** Set String$ to "Not Allocated" for Diagnostic Screen 2440String$="Not Allocated" 2450:--- 2460REM **** Set Diagnostics to off 2470Diagnostic%=0 2480:--- 2490REM *** Set GameName$ to " " 2500ItemSelectedName$=" " 2510:--- 2520REM *** Set initial selection to List All 2530Selection%=0 2540:--- 2550REM *** Screen listing set to off 2560Listing%=0 2570:--- 2580REM *** Nnumber of entries listed on screen 2590ScreenLines%=17 2600:--- 2610REM *** Nnumber of Genres 2620GenreNumber%=34 2630:--- 2640REM *** Count of displayed pages of 17 lines 2650DisplayPage%=1 2660:--- 2670REM *** FrontSlot=2 BackSlot=0 2680SLOT%=0 2690:--- 2700REM *** Start of First entry in the Index ROM 2710GameStart%=&8008 2720:--- 2730REM *** Number of Game entries (located at &8002) 2740TotalGames%=0 2750:--- 2760REM *** Holds a copy of TotalGames for the search routines use 2770NumberOfGames%=0 2780:--- 2790REM *** Number of Utilities and Applications (located at &8003/4) 2800TotalUtilsApps%=0 2810:--- 2820REM *** Number of Utilities 2830NumberOfUtilities%=0 2840:--- 2850REM *** Number of Applications 2860NumberOfApplications%=0 2870:--- 2880REM *** Address of next entry in list - Set, initially, to start 2890NextAddress%=&8008 2900:--- 2910REM *** Number to add to GameStart% for next entry - Length of index 2920IndexLen%=56 2930:--- 2940REM *** Page Mode: 1=1 x 16k block needed : 2=2 x 16k blocks needed 2950PM%=1 2960:--- 2970REM *** Page Mode data location as an Offset from GameStart% 2980PMOFF%=46 2990:--- 3000REM *** Control Latch Data 3010CL%=0 3020:--- 3030REM *** Page Latch Data 3040PG%=0 3050:--- 3060REM *** Page Latch data location as an Offset from GameStart% 3070PGOFF%=47 3080:--- 3090REM *** Load Method 0=Reset, 1=Chain, 2=Exc, 3=Run, 4=Loader, 5=Other 3100LD%=0 3110:--- 3120REM *** Load Method data location as an Offset from GameStart% 3130LDOFF%=49 3140:--- 3150REM *** ROM Attribute data location as an Offset from GameStart% 3160RAOFF%=52 3170RBOFF%=53 3180:--- 3190REM *** Publisher's name, first letter, as an Offset from GameStart% 3200PNOFF%=48 3210:--- 3220REM *** Genre data location as an Offset from GameStart% 3230GEOFF%=54 3240:--- 3250REM *** Search information: Entered as 1,2,3,4 Used as 0.1.2.3. 3260Search%=0 3270:--- 3280REM *** ROM Table address for the Electron 3290ROMTable%=&2A0 3300:--- 3310REM *** Game ROM type byte address, contents for ROM table 3320Romtype%=&8006 3330:--- 3340REM *** Read from ROM: Y%=ROM# : X=# bytes to fetch : A%=fetch or display 3350:--- 3360REM *** A=1=fetch A=0=output to display 3370DIMMC%35:REM Save 30 bytes 3380:--- 3390REM *** Start of m/c 3400P%=MC% 3410[OPT 0   \REM Don't list 3420CMP#0    \REM Compare A with 0 3430BEQ P%+6 \REM Branch to display loop if A=0 3440JSR&FFB9 \REM Call OSRDRM ROM# in Y address in &F6=(LSB) &F7=(MSB) 3450RTS      \REM Return with byte in A 3460.LP 3470TXA      \REM Transfer X to A 3480PHA      \REM and push to stack 3490TYA      \REM Transfer Y to A (not preserved in the Electron!) 3500PHA      \REM and push to stack 3510JSR&FFB9 \REM Call OSRDRM ROM# in Y,address in &F6=(LSB) &F7=(MSB) 3520JSR&FFEE \REM Call OSWRCH Contents of A to Screen 3530PLA      \REM Restore Y 3540TAY      \REM to reinstate ROM# 3550INC&F6   \REM Increment ROM LSB address 3560BNE P%+4 \REM If not rolled over to 0then jump over next instruction 3570INC&F7   \REM If&F6=0then increment ROM MSB address 3580PLA      \REM Pull from stack 3590TAX      \REM and transfer to X 3600DEX      \REM Decrement string length 3610BNE LP   \REM If not 0 then loop 3620RTS      \REM Return when done 3630] 3640:--- 3650REM *** Locate the Cartridge 3660PROCFindSlot 3670:--- 3680REM *** Load the total number of Games, Utilities and Applications 3690PROCLoadEntries 3700:--- 3710REM *** Allocate room for storage matrix 3720DIMLOCATION%(18) 3730:--- 3740REM *** Start Location storage 3750DIM NextAddress%(14) 3760:--- 3770REM *** Start Number of Games storage 3780DIM NumberOfGames%(14) 3790:--- 3800REM *** Used to store value of SearchNumber2% for Page Back 3810DIM SearchNumber2%(14) 3820:--- 3830REM *** Total Number of games found for Alpha or Publisher search 3840DIM AlphaSearch%(TotalGames%) 3850:--- 3860ENDPROC 3870:--- 3880REM *** Fetch Count of Entries 3890DEFPROCLoadEntries 3900:--- 3910REM *** Load, from the index, the total number of games 3920A%=1 3925TotalGames%=FNrm(&8002,SLOT%) 3930:--- 3940REM *** Preload NumberOfEntries for initial listing 3950NumberOfGames%=TotalGames% 3960:--- 3970REM *** Load, from the index, the total number of Utilities 3980NumberOfUtilities%=FNrm(&8003,SLOT%) 3990:--- 4000REM *** Load, from the index, the total number of Applications 4010NumberOfApplications%=FNrm(&8004,SLOT%) 4020:--- 4030REM *** Calculate the total number of Utilities and Applications 4040TotalUtilsApps%=NumberOfUtilities% + NumberOfApplications% 4050:--- 4060REM *** Calculate the start of the Utilities and Applications 4070UtilsAppsStart%=GameStart% + (TotalGames% * IndexLen%) 4080:--- 4090ENDPROC 4100:--- 4110REM *** Increment to the next Entry 4120DEFPROCAddressIncrement 4130:--- 4140REM *** Point to next entry in list 4150NextAddress%=NextAddress%+IndexLen% 4160:--- 4170REM *** Decrement entries% counter 4180IF Search%>0 THEN NumberOfGames%=NumberOfGames%-1 4190:--- 4200ENDPROC 4210:--- 4220REM *** Page Backwards calculations 4230DEFPROCPageBack 4240:--- 4250DisplayPage%=DisplayPage%-1 4260:--- 4270NextAddress%=NextAddress%(DisplayPage%) 4280:--- 4290NumberOfGames%=NumberOfGames%(DisplayPage%) 4300:--- 4310SearchNumber2%=SearchNumber2%(DisplayPage%) 4320:--- 4330ENDPROC 4340:--- 4350REM *** ESCAPE key pressed 4360GOTO180 4370REM *** CLOSE 4380DEFPROCSCAPE 4390:--- 4400REM *** Clear the bottom information line 4410PROCclearline(19,24,60) 4420:--- 4430REM *** Turn on inverted text 4440PROCinv(1) 4450:--- 4460REM *** Print message 4470PRINTTAB(33,24)" Bye Bye "; 4480:--- 4490REM *** Turn off inverted text 4500PROCinv(0) 4510:--- 4520REM *** Leave Bye Bye message for a short time 4530PROCWAIT(3) 4540:--- 4550REM *** Turn on Cursor Editing 4560*FX4,0 4570:--- 4580REM *** Turn on cursor 4590PROCcursor(1) 4600:--- 4610REM *** Clear the screen 4620CLS 4630:--- 4640REM *** Leave the cursor on second line - More visible! 4650PRINTTAB(0,1) 4660:--- 4670REM *** Inform of no index if true 4680IF F%=1 THEN PRINTTAB(35,2);"NO INDEX!" 4690:--- 4700END 4710:--- 4720REM Wait routine 4730DEFPROCWAIT(U%) 4740FORW%=0 TO 500*U% 4750:--- 4760NEXT 4770:--- 4780ENDPROC 4790:--- 4800REM *** Search for Alpha or Pub 4810DEFPROCSORT 4820ENDPROC 4830:--- 4840REM *** Search for Alpha 4850DEFPROCSRCHALPHA 4860:--- 4870REM *** If no entries set for exit 4880IF NumberOfGames%<1 THEN LVALID%=1 4890:--- 4900REM *** Set for m/c read 4910A%=1 4920:--- 4930REM *** If there are entries check fo selection match 4940IF LVALID%=0 AND Search%=1 AND (FNrm(NextAddress%,SLOT%)=Selection%) THEN LVALID%=1 4950:--- 4960REM *** If no match found go and point to the next entry 4970IF LVALID%=0 THEN PROCAddressIncrement 4980:--- 4990ENDPROC 5000:--- 5010REM *** Set-up Search options 5020DEFPROCAlphaPubGen 5030:--- 5040REM *** Clear the top left information areas 5050PROCclearline(1,1,20):PROCclearline(1,2,23) 5060:--- 5070REM *** Clear bottom display area 5080VDU28,0,22,79,20:CLS 5090:--- 5100REM *** Clear text window 5110PROCclearwindow 5120:--- 5130REM *** If Genre selected go and list available Genres 5140IF Search%=3 THEN PROCListGenre 5150:--- 5160REM *** Remove text windows 5170VDU26 5180:--- 5190REM *** Turn on inverted text 5200PROCinv(1) 5210:--- 5220REM *** Print slected choice - Alphabetically 5230IF Search%=1 THEN PRINTTAB(19,23);" Games Alphabetically ";TAB(19,24);" Chose #, Letter between A > Z or ";CHR$(225);" Back "; 5240:--- 5250REM *** Print slected choice - Publisher 5260IF Search%=2 THEN PRINTTAB(19,23);" Games by Publisher ";TAB(19,24);" Chose Letter between A > Z or ";CHR$(225);" Back "; 5270:--- 5280REM *** Print slected choice - Publisher 5290IF Search%=3 THEN PRINTTAB(19,23);" Games by Genre ";TAB(19,24);" Chose a Genre from above or ";CHR$(225);" Back "; 5300:--- 5400REM *** Turn off inverted text 5410PROCinv(0) 5420:--- 5430REM *** Turn on the cursor 5440PROCcursor(1) 5450:--- 5460REM *** Clear the Escape option 5470PROCclearline(67,24,12) 5480:--- 5490REM *** Set key-entry location - Alphabetically 5500IF Search%=1 THEN PRINTTAB(61,24);:PROCKey1(34,36,64,91) 5510:--- 5520REM *** Set key-entry location - Publisher 5530IF Search%=2 THEN PRINTTAB(58,24);:PROCKey1(138,140,64,91) 5540:--- 5550REM *** Set key-entry location - Genre 5560IF Search%=3 THEN PRINTTAB(56,24);:PROCKey3 5570:--- 5690REM *** Turn off the cursor 5700PROCcursor(0) 5710:--- 5720REM *** Show selection for short time then clear key-entry location - Alphabetically 5730IF Search%=1 THEN PRINTTAB(61,24);CHR$(Selection%);:PROCWAIT(1):VDU8,32 5740:--- 5750REM *** Show selection for short time then clear key-entry location - Publisher 5760IF Search%=2 THEN PRINTTAB(58,24);CHR$(Selection%);:PROCWAIT(1):VDU8,32 5770:--- 5780REM *** Show selection for short time then clear key-entry location - Genre 5790IF Search%=3 THEN PRINTTAB(56,24);CHR$(Selection%);:PROCWAIT(1):VDU8,32 5800:--- 5900REM *** If BACK then exit 5910IF Selection%=139 THEN PROCclearline(56,24,16):PROCclearwindow:VDU26:Selection%=239:ENDPROC 5920:--- 5930REM *** Find all that match the selection loop 5940:--- 5950REM *** Search routines 5960:--- 5970IF Search%<>1 THEN GOTO 6020 5980A%=2:X%=SLOT%:Y%=Selection% 5990CALL&E00,NextAddress%,NumberOfGames%,IndexLen%,AlphaSearch%(0),SearchNumber% 6000GOTO 6140 6010:--- 6020IF Search%<>2 THEN GOTO 6080 6030A%=4:X%=SLOT%:Y%=Selection% 6040CALL&E00,NextAddress%,NumberOfGames%,IndexLen%,AlphaSearch%(0),SearchNumber%,PNOFF% 6050GOTO 6140 6060:--- 6070REM *** If Selection% is > than max Games then load for Utils & Apps 6080IF Selection% > 86 THEN NextAddress%=UtilsAppsStart%:NumberOfGames%=TotalUtilsApps% 6090:--- 6100A%=3:X%=SLOT%:Y%=Selection% 6110CALL&E00,NextAddress%,NumberOfGames%,IndexLen%,AlphaSearch%(0),SearchNumber%,GEOFF% 6120:--- 6130REM *** Load variables for displaying selected list 6140NumberOfGames%=SearchNumber% 6150:--- 6160REM *** Make a copy of SearchNumber for display purposes 6170SearchNumber1%=SearchNumber% 6180:--- 6190REM *** Make a copy of Selection for display purposes 6200Selection1%=Selection% 6210:--- 6220REM *** Clear text window 6230IF Search%=3 THEN PROCclearwindow:VDU26 6240:--- 6250REM *** For Genre, convert Selection% into number 6260IF Search%=3 THEN PROCGenreCount 6270:--- 6280ENDPROC 6290:--- 6300REM *** List Game Catagories 6310DEFPROCListGenre 6320:--- 6330RESTORE 6350 6340:--- 6350DATA Adventure (graphics),Adventure (text),Adventure (txt/graph),Adventure (arcade),Avoid 'em,Ball Control,Ball Game,Bat 'n' Ball,Beat 'em Up,Board Game,Card Game,Catch 'em,Collect 'em Up,Driving,Educational,Football,Lunar Landing 6360:--- 6370DATA Maze,Platform,Puzzle,Quiz,RPG,Run 'n' Gun,Run 'n' Jump,Save 'em Up,Shooter,Simulation,Space,Sport,Strategy,Word Games,Traditional Games,Utilities,Applications 6380:--- 6390REM *** Set AA% equal to start of line : AB% equal to list start number 6400AA%=0 6410:--- 6420AB%=0 6430:--- 6440REPEAT 6450:--- 6460REM *** List Genres 0 to 9 in two colums 6470READ I$,J$ 6500:--- 6510PRINTTAB(0,AA%);AB%;" ";I$;TAB(27,AA%);AB%+1;" ";J$; 6540:--- 6550AA%=AA%+1 6560:--- 6570AB%=AB%+2 6580:--- 6590UNTIL AA%=5 6600:--- 6610REM *** Set to "A" to list alphabelically 6620AB%=65 6630:--- 6640REPEAT 6650:--- 6660READ I$,J$ 6690:--- 6700PRINTTAB(0,AA%);CHR$(AB%);" ";I$; 6710:--- 6720IF AA%=16 THEN PRINT" - (";NumberOfUtilities%;")"; 6730:--- 6740PRINTTAB(27,AA%);CHR$(AB%+1);" ";J$; 6750:--- 6760IF AA%=16 THEN PRINT" - (";NumberOfApplications%;")"; 6770:--- 6780AA%=AA%+1 6790:--- 6800AB%=AB%+2 6810:--- 6820IF AA%=16 AND NumberOfUtilities%=0 AND NumberOfApplications%=0 THEN AA%=17 6830:--- 6840UNTIL AA%=17 6850:--- 6860ENDPROC 6870:--- 6880REM *** OSRDRM Read a Byte from ROM 6890REM *** Call with byte=FNrm(addr,rom) 6900DEFFNrm(!&F6,Y%)=(USRMC%)AND&FF 6910:--- 6920REM *** List All Titles (Search%=0) 6930DEFPROCDisplayList0 6940:--- 6950REM *** Enter with: 6960REM *** NumberOfGames% equal to total games 6970REM *** NextAddress% equal to start of games list 6980:--- 6990REM *** Clear text window 7000PROCclearwindow 7010:--- 7020REM *** StartLine%() equals the stored entry start address 7030NextAddress%(DisplayPage%)=NextAddress% 7040:--- 7050REM *** PLINE% equals the printed line position 7060PLINE%=0 7070:--- 7080REM *** StartNumber%() equals the stored number of entries 7090NumberOfGames%(DisplayPage%)=NumberOfGames% 7100:--- 7110REM *** POSCHR%=Position of entry text when being displayed 7120POSCHR%=0 7130:--- 7140REM *** LVALID% is set =1 if a valid line is found 7150LVALID%=0 7160:--- 7170REM *** Check if there is nothing to display 7180IF NumberOfGames%<1 AND PLINE%=0 THEN PRINTTAB(19,1)"No Entries!" 7190:--- 7200REM *** Print the letter for the next displayed line 7210IF NumberOfGames%<0 THEN ENDPROC 7220:--- 7230Y%=46:A%=0:X%=SLOT% 7240CALL&E00,NextAddress%,PLINE%,NumberOfGames%,IndexLen%,ScreenLines%,LOCATION%(0) 7250:--- 7260ENDPROC 7270:--- 7280REM *** List Alpha Titles (Search%=1) 7290DEFPROCDisplayList123 7300:--- 7310REM *** Enter with: 7320REM *** NumberOfGames% equals number of entries found 7330REM *** AlphaSearch() contains address of found entries 7340REM *** SearchNumber equals counter for AlphaSearch() 7350:--- 7360REM *** Clear text window 7370PROCclearwindow 7380:--- 7390REM *** StartLine%() equals the stored entry start address 7400NextAddress%(DisplayPage%)=NextAddress% 7410:--- 7420REM *** NumberOfGames%() equals the stored number of entries 7430NumberOfGames%(DisplayPage%)=NumberOfGames% 7440:--- 7450REM *** StartNumber2%() equals the found number of entries 7460SearchNumber2%(DisplayPage%)=SearchNumber2% 7470:--- 7480REM *** PLINE% equals the printed line position 7490PLINE%=0 7500:--- 7510REM *** Check if there is nothing to display 7520IF NumberOfGames%<1 AND PLINE%=0 THEN PRINTTAB(19,1)"No Entries!"; 7530:--- 7540REM *** Print the letter for the next displayed line 7550IF NumberOfGames%<1 THEN ENDPROC 7560:--- 7570Y%=46:A%=1:X%=SLOT% 7580CALL&E00,NextAddress%,PLINE%,NumberOfGames%,AlphaSearch%(0),ScreenLines%,LOCATION%(0),SearchNumber2% 7590:--- 7600ENDPROC 7610:--- 7620REM *** Key entry procedure - Alphabetically (Low1%=34, High1%=36) 7625REM                        or Publisher (Low1%=138, High1%=140) 7630DEFPROCKey1(Low1%,High1%,Low2%,High2%) 7640:--- 7650REM *** Flush the keyboard buffer 7660*FX21,0 7670:--- 7680REPEAT 7690:--- 7700REM *** Wait for key entry 7710Selection%=GET 7720:--- 7730REM *** Until #, A to Z or BACK is selected - Alphabetically 7740UNTIL Selection%>Low1% AND Selection%<High1% OR Selection%>Low2% AND Selection%<High2% OR Selection%=139 7750:--- 7760ENDPROC 7770:--- 7940REM *** Key entry procedure - Genre 7950DEFPROCKey3 7960:--- 8000REM *** Check Utils and Apps adjust input range as needed 8010IF NumberOfUtilities%=0 AND NumberOfApplications%=0 THEN GenreMax%=87 ELSE GenreMax%=89 8020:--- 8030PROCKey1(47,58,64,GenreMax%) 8090:--- 8100ENDPROC 8110:--- 8120REM *** Turn Selection into # from 0 to max # of Genre for Genra display 8130DEFPROCGenreCount 8140:--- 8150REM *** Convert selections between 0 to 9 8160IF Selection%>47 AND Selection%<58 THEN GenreSelection%=Selection%-48 8170:--- 8180REM *** Convert selections between A and last letter 8190IF Selection%>64 AND Selection%<89 THEN GenreSelection%=Selection%-55 8200:--- 8210REM *** Find Genre selection 8220RESTORE 6350:FOR M%=0 TO GenreSelection%:READ Genre$:NEXT 8230:--- 8240ENDPROC 8250:--- 8260REM ********************************************** 8270:--- 8280REM *** Check which Slot the Cartridge is in 8290DEFPROCFindSlot 8300:--- 8310REM *** Check if the cartridge is in slot 0 - Looking for 17 and A3 8320A%=1 8325IF FNrm(&8000,0)<>&17 THEN GOTO 8360 8330IF FNrm(&8001,0)=&A3 THEN SLOT%=0:ENDPROC 8340:--- 8350REM *** Check if the cartridge is in slot 2 - Looking for 17 and A3 8360IF FNrm(&8000,2)<>&17 THEN GOTO 8400 8370IF FNrm(&8001,2)=&A3 THEN SLOT%=2:ENDPROC 8380:--- 8390REM *** If no index is found go to exit F%=1 displays "no index" 8400F%=1:PROCSCAPE 8410:--- 8420REM *** Start the selected Game 8430DEFPROCGameStart 8440:--- 8450REM *** Clear the screen ready for Loading Message 8460CLS 8470:--- 8480REM *** Get the address of the chosen entry if ALL selected 8490IF Search%=0 THEN NextAddress%=LOCATION%(Selection%-1) 8500:--- 8510Selection%=(Selection%-1)+((DisplayPage%-1)*ScreenLines%) 8520:--- 8530REM *** Get the address of the chosen entry if NOT ALL selected 8540IF Search%<>0 THEN NextAddress%=AlphaSearch%(Selection%) 8550:--- 8560REM *** Load variables from ROM 8565A%=1 8570PM%=FNrm((NextAddress%+PMOFF%),SLOT%) : REM * Page Mode 8580PG%=FNrm((NextAddress%+PGOFF%),SLOT%) : REM * Page Number 8590LD%=FNrm((NextAddress%+LDOFF%),SLOT%) : REM * Load Method 8600LS%=FNrm((NextAddress%+LSOFF%),SLOT%) : REM * Load String start 8610SC%=FNrm((NextAddress%+SCOFF%),SLOT%) : REM * Load String count 8612RA%=FNrm((NextAddress%+RAOFF%),SLOT%) : REM * ROM attr/base (low) 8614RB%=FNrm((NextAddress%+RBOFF%),SLOT%) : REM * ROM attr/base (high) 8620:--- 8630REM *** Set-up the Page Latch and Control Latch data 8640:--- 8650REM *** If PageMode=1 (16K game) or PageMode=3 (multi-ROM) Control Latch bit 2 = H 8660IF PM%=1 OR PM%=3 THEN CL%=4 : REM * 00000100 8670:--- 8680REM *** If PageMode=1 and stored page is in the upper half CL bit 1=H 8690IF PM%MOD2=1 AND PG%>127 THEN CL%=CL%+2 : REM * 00000110 8692:--- 8694REM *** If PageMode=3 then store the page number in the address held by 8695REM *** RA% and RB% 8696IF PM%=3 THEN BaseAddress%=RA% OR (RB%*256):?BaseAddress%=PG% 8700:--- 8710REM$ *** Print out Variables for Diagnostic Screen, if required 8720IF Diagnostic%=1 THEN PROCPVariables 8730:--- 8740REM *** Insert Game ROM into ROM Table 8750PROCROMIinsertion 8760:--- 8770REM *** Get String for Load method 1, 2, 3 or 4 8780IF Diagnostic% <>1 AND LD%>1 AND LD%<5 THEN PROCGetString 8790:--- 8791REM *** Don't clear memory on Break - it will break the ROM unplug code 8792REM *FX200,3 8793:--- 8800REM *** Start game loading 8810:--- 8820IF LD%=0 THEN PROCRebootToROM 8860IF LD%=4 THEN OSCLI String$ 8880:--- 8890REM *** Shouldn't ever get here! 8900END 8910:--- 8920DEFPROCRebootToROM 8930:--- 8940REM Unplug ROMs 8950FOR A%=1 TO &10 8960A%?&DF0=&80 8970NEXT 8980:--- 8990CALL !-4 9250:--- 9260REM *** Get String for Load method 1, 2, 3 or 4 9270DEFPROCGetString 9280:--- 9290REM *** Blank String$ 9300String$="" 9310:--- 9320REM *** Get character length 9330:--- 9340FOR Z%=0 TO SC%-1 9350:--- 9360A%=1 : String$=String$+CHR$(FNrm((&8000+LS%+Z%),SLOT%+1)) 9370:--- 9380NEXT 9390:--- 9400ENDPROC 9410:--- 9420REM *** Insert Game ROM into ROM Table 9430DEFPROCROMIinsertion 9440:--- 9450REM *** Remove Menu ROM from ROM Table to stop system crash 9460?(ROMTable%+SLOT%+1)=0 9470:--- 9480REM *** Write data to Page Latch and Control Latch 9490?&FC00=PG% : ?&FC08=CL% 9500:--- 9510REM *** Add newly inserted ROM to ROM Table 9520A%=1:?(ROMTable%+SLOT%+1)=FNrm(Romtype%,SLOT%+1) 9530:--- 9540REM *** Add newly inserted ROM is 32K then add 2nd ROM to ROM Table 9550IF PM%=2 THEN A%=1:?(ROMTable%+SLOT%)=FNrm(Romtype%,SLOT%) 9560:--- 9570ENDPROC 9580:--- 9590REM *** Print variables 9600DEFPROCPVariables 9610:--- 9620REM *** Locate ItemSelectedName in the Index 9630PROCFindItemSelectedName 9640:--- 9650REM *** Turn on inverted text 9660PROCinv(1) 9670:--- 9680REM *** Print header text - centered 9690PRINTTAB(26,1);" MGC Diagnostic Screen " 9700:--- 9710REM *** Turn off inverted text 9720PROCinv(0) 9730:--- 9740PRINT 9750PRINT" (A) . . . . Item Selected = ";ItemSelectedName$ 9760:--- 9770PRINT" (B) Location Within Index = &";~NextAddress% 9780:--- 9790PRINT" (C) . . . . . . Page Mode = ";PM%;:IF PM%=1 THEN PRINT" - Single 16K Block" ELSE PRINT" - Dual 16K Block" 9800:--- 9810PRINT" (D) . . . 16k Page Number = ";PG%;" (&";:IF PG% < 16 THEN PRINT"0";~PG%;")"; ELSE PRINT;~PG%;")"; 9820:--- 9830IF PM%=2 THEN PRINT" - ";PG%+128;" (&";~(PG%+128);")" ELSE PRINT 9840:--- 9850PRINT" (E)  64K/16k Block Number = "; 9860:--- 9870IF PG%/4 < 16 THEN PRINT"A0";~PG% DIV 4;"/";PG% MOD 4; 9880:--- 9890IF PM%=2 AND PG%/4 < 16 THEN PRINT" - B0";~PG% DIV 4;"/";PG% MOD 4; 9900:--- 9910IF PG%/4 > 16 AND PG%/4 < 32 THEN PRINT"A";~PG% DIV 4;"/";PG% MOD 4; 9920:--- 9930IF PM%=2 AND PG%/4 > 16 AND PG%/4 < 32 THEN PRINT" - B";~PG% DIV 4;"/";PG% MOD 4; 9940:--- 9950IF PG%/4-32 > -1 AND PG%/4-32 < 16 THEN PRINT"B0";~PG% DIV 4-32;"/";PG% MOD 4; 9960:--- 9970IF PG%/4-32 > 16 THEN PRINT"B";~PG% DIV 4-32;"/";PG% MOD 4; 9980:--- 9990PRINT10000:---10010PRINT" (F) . . . . Control Latch = ";CL%10020:---10030PRINT" (G) . . . . . Load Method = ";LD%10040:---10050PRINT" (H) . . . . . . . .  Slot = ";SLOT%;"/";SLOT%+110060:---10100REM *** Get String for Load method 1, 2, 3 or 410110IF LD%>1 AND LD%<5 THEN PROCGetString10120:---10130PRINT" (I) . . Load String start = ";LS%;:IF LS% >9 THEN PRINT" (&";~LS%;")" ELSE PRINT10140:---10150PRINT" (J) . . Load String count = ";SC%10160:---10170PRINT" (K) . String to call game = ";String$10180:---10190PRINT:PRINT" To start the selected Game Press 0"10200:---10210PRINT:PRINT" Any other key to Exit"10220:---10230KEY=GET10240:---10250IF KEY=48 THEN ENDPROC10260:---10270PROCSCAPE10280:---10290REM Find the selected Game/Utility/Application's Name10300DEFPROCFindItemSelectedName10310:---10320REM *** Initialise String and count variables10330ItemSelectedName$=""10340aA$=""10350a%=010360:---10370REM *** Load selected item's name from Index10380REPEAT10390:---10400REM *** A%=1 : String$=String$+CHR$(FNrm((&8000+LS%+Z%),SLOT%+1))10410REM *** Get character from Index10420a$=CHR$(FNrm(NextAddress%+a%,SLOT%))10430:---10440REM *** Add retrived character to Name10450ItemSelectedName$=ItemSelectedName$+a$10460:---10470REM *** Increment counter10480a%=a%+110490:---10500REM Check for Name end "."10510UNTIL a$="."10520ItemSelectedName$=LEFT$(ItemSelectedName$,a%-2)10530:---10540ENDPROC10550:---10560DEFPROCcursor(a)10570VDU23,1,a;0;0;0;10580ENDPROC10550:---10560DEFPROCinv(a)10570VDU17,1-a,17,128+a10580ENDPROC10590:---10600DEFPROCclearwindow10610VDU28,14,19,64,3:CLS10620ENDPROC10630:---10640DEFPROCclearline(X,Y,N)10650PRINTTAB(X,Y);SPC(N);10660ENDPROC>